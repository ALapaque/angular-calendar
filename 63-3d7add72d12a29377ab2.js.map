{"version":3,"sources":["webpack:///63-3d7add72d12a29377ab2.js","webpack:///./node_modules/@angular/common/esm5/http.js","webpack:///./demos/demo-modules/async-events/component.ngfactory.js","webpack:///./demos/demo-modules/async-events/module.ts","webpack:///./demos/demo-modules/async-events/component.ts","webpack:///./demos/demo-modules/async-events/module.ngfactory.js"],"names":["webpackJsonp","643","module","__webpack_exports__","__webpack_require__","paramParser","rawParams","codec","map$$1","Map","length","split","forEach","param","eqIdx","indexOf","_a","decodeKey","slice","decodeValue","key","val","list","get","push","set","standardEncoding","v","encodeURIComponent","replace","mightHaveBody","method","isArrayBuffer","value","ArrayBuffer","isBlob","Blob","isFormData","FormData","addBody","options","body","headers","observe","params","reportProgress","responseType","withCredentials","getResponseUrl","xhr","responseURL","test","getAllResponseHeaders","getResponseHeader","interceptingHandler","backend","interceptors","reduceRight","next","interceptor","HttpInterceptorHandler","jsonpCallbackContext","window","View_DemoComponent_1","_l","core","View_DemoComponent_3","_v","en","$event","ad","_co","component","dayClicked","day","eventClicked","event","calendar_month_view_component_ngfactory","calendar_month_view_component","calendar_utils_provider","viewDate","events","activeDayIsOpen","_ck","parent","context","$implicit","View_DemoComponent_4","calendar_week_view_component_ngfactory","calendar_week_view_component","View_DemoComponent_5","calendar_day_view_component_ngfactory","calendar_day_view_component","View_DemoComponent_2","common","ngSwitch","ngSwitchCase","view","View_DemoComponent_0","fetchEvents","calendar_header_component_ngfactory","calendar_header_component","viewChange","viewDateChange","ngIf","ngIfElse","transform","events$","View_DemoComponent_Host_0","RenderType_DemoComponent","component_DemoComponent","http_HttpClient","Object","defineProperty","DemoModule","calendar_tooltip_directive_ngfactory","datepicker_ngfactory","of","concatMap","filter","map","tslib_es6","Observable","HttpHandler","HttpBackend","HttpHeaders","_this","this","normalizedNames","lazyUpdate","lazyInit","line","index","name_1","toLowerCase","trim","maybeSetNormalizedName","has","keys","name","values","prototype","init","Array","from","getAll","append","clone","op","delete","lcName","copyFrom","update","applyUpdate","other","concat","base","undefined","apply","toDelete_1","existing","fn","HttpUrlEncodingCodec","encodeKey","k","encodeValue","decodeURIComponent","HttpParams","updates","cloneFrom","encoder","fromString","fromObject","Error","isArray","res","toString","eKey","join","base_1","idx","splice","HttpRequest","url","third","fourth","toUpperCase","urlWithParams","qIdx","sep","serializeBody","JSON","stringify","detectContentTypeHeader","type","setHeaders","reduce","setParams","HttpEventType","Sent","UploadProgress","ResponseHeader","DownloadProgress","Response","User","HttpResponseBase","defaultStatus","defaultStatusText","status","statusText","ok","http_HttpHeaderResponse","_super","HttpHeaderResponse","call","http_HttpResponse","HttpResponse","http_HttpErrorResponse","HttpErrorResponse","message","error","HttpClient","handler","request","first","req","handle","res$","head","jsonp","callbackParam","patch","post","put","decorators","ctorParameters","intercept","HTTP_INTERCEPTORS","http_NoopInterceptor","NoopInterceptor","nextRequestId","JsonpCallbackContext","http_JsonpClientBackend","JsonpClientBackend","callbackMap","document","nextCallback","observer","callback","node","createElement","src","finished","cancelled","data","cleanup","parentNode","removeChild","onLoad","complete","onError","addEventListener","appendChild","removeEventListener","args","http_JsonpInterceptor","JsonpInterceptor","XSSI_PREFIX","XhrFactory","http_BrowserXhr","BrowserXhr","build","XMLHttpRequest","http_HttpXhrBackend","HttpXhrBackend","xhrFactory","open","setRequestHeader","detectedType","reqBody","headerResponse","partialFromXhr","response","responseText","parse","text","sentHeaders","onDownProgress","progressEvent","loaded","lengthComputable","total","partialText","onUpProgress","progress","upload","send","abort","XSRF_COOKIE_NAME","XSRF_HEADER_NAME","HttpXsrfTokenExtractor","http_HttpXsrfCookieExtractor","HttpXsrfCookieExtractor","doc","platform","cookieName","lastCookieString","lastToken","parseCount","getToken","cookieString","cookie","http_HttpXsrfInterceptor","HttpXsrfInterceptor","tokenService","headerName","lcUrl","startsWith","token","http_HttpClientXsrfModule","HttpClientXsrfModule","disable","ngModule","providers","provide","useClass","withOptions","useValue","useExisting","multi","http_HttpClientModule","HttpClientModule","imports","useFactory","deps","operators_map","HttpClientJsonpModule","date_fns","colors","DemoComponent","http","Date","ngOnInit","getStart","month","week","getEnd","pipe","results","film","title","start","release_date","color","yellow","meta","date","id","styles_DemoComponent","encapsulation","styles","DemoComponentNgFactory","esm5_forms","ngb_calendar","datepicker_i18n","ngb_date_parser_formatter","datepicker_config","timepicker_config","draggable_helper_provider","calendar_event_title_formatter_provider","calendar_date_formatter_provider","calendar_common_module","drag_and_drop_module","calendar_month_module","resizable_module","calendar_week_module","calendar_day_module","calendar_module","datepicker_module","timepicker_module","demo_utils_module","router","d","DemoModuleNgFactory","p0_0","path"],"mappings":"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","file":"63-3d7add72d12a29377ab2.js","sourcesContent":["webpackJsonp([63],{\n\n/***/ 643:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n\n// EXTERNAL MODULE: ./node_modules/@angular/core/esm5/core.js\nvar core = __webpack_require__(2);\n\n// CONCATENATED MODULE: ./demos/demo-modules/async-events/module.ts\nvar DemoModule = (function () {\n    function DemoModule() {\n    }\n    return DemoModule;\n}());\n\n\n// EXTERNAL MODULE: ./src/modules/common/calendar-tooltip.directive.ngfactory.js\nvar calendar_tooltip_directive_ngfactory = __webpack_require__(286);\n\n// EXTERNAL MODULE: ./node_modules/@ng-bootstrap/ng-bootstrap/datepicker/datepicker.ngfactory.js + 4 modules\nvar datepicker_ngfactory = __webpack_require__(287);\n\n// EXTERNAL MODULE: ./src/modules/month/calendar-month-view.component.ngfactory.js + 6 modules\nvar calendar_month_view_component_ngfactory = __webpack_require__(292);\n\n// EXTERNAL MODULE: ./src/modules/month/calendar-month-view.component.ts\nvar calendar_month_view_component = __webpack_require__(115);\n\n// EXTERNAL MODULE: ./src/modules/common/calendar-utils.provider.ts\nvar calendar_utils_provider = __webpack_require__(42);\n\n// EXTERNAL MODULE: ./src/modules/week/calendar-week-view.component.ngfactory.js + 4 modules\nvar calendar_week_view_component_ngfactory = __webpack_require__(294);\n\n// EXTERNAL MODULE: ./src/modules/week/calendar-week-view.component.ts\nvar calendar_week_view_component = __webpack_require__(117);\n\n// EXTERNAL MODULE: ./src/modules/day/calendar-day-view.component.ngfactory.js + 6 modules\nvar calendar_day_view_component_ngfactory = __webpack_require__(293);\n\n// EXTERNAL MODULE: ./src/modules/day/calendar-day-view.component.ts\nvar calendar_day_view_component = __webpack_require__(116);\n\n// EXTERNAL MODULE: ./node_modules/@angular/common/esm5/common.js\nvar common = __webpack_require__(4);\n\n// EXTERNAL MODULE: ./demos/demo-modules/demo-utils/calendar-header.component.ngfactory.js\nvar calendar_header_component_ngfactory = __webpack_require__(707);\n\n// EXTERNAL MODULE: ./demos/demo-modules/demo-utils/calendar-header.component.ts\nvar calendar_header_component = __webpack_require__(706);\n\n// EXTERNAL MODULE: ./node_modules/rxjs/observable/of.js\nvar of = __webpack_require__(299);\nvar of_default = /*#__PURE__*/__webpack_require__.n(of);\n\n// EXTERNAL MODULE: ./node_modules/rxjs/operator/concatMap.js\nvar concatMap = __webpack_require__(303);\nvar concatMap_default = /*#__PURE__*/__webpack_require__.n(concatMap);\n\n// EXTERNAL MODULE: ./node_modules/rxjs/operator/filter.js\nvar filter = __webpack_require__(122);\nvar filter_default = /*#__PURE__*/__webpack_require__.n(filter);\n\n// EXTERNAL MODULE: ./node_modules/rxjs/operator/map.js\nvar map = __webpack_require__(121);\nvar map_default = /*#__PURE__*/__webpack_require__.n(map);\n\n// EXTERNAL MODULE: ./node_modules/tslib/tslib.es6.js\nvar tslib_es6 = __webpack_require__(44);\n\n// EXTERNAL MODULE: ./node_modules/rxjs/Observable.js\nvar Observable = __webpack_require__(5);\nvar Observable_default = /*#__PURE__*/__webpack_require__.n(Observable);\n\n// CONCATENATED MODULE: ./node_modules/@angular/common/esm5/http.js\n/**\n * @license Angular v5.0.2\n * (c) 2010-2017 Google, Inc. https://angular.io/\n * License: MIT\n */\n\n\n\n\n\n\n\n\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\n * `HttpResponse`.\n *\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\n * `HttpBackend`.\n *\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\n *\n * \\@stable\n * @abstract\n */\nvar HttpHandler = (function () {\n    function HttpHandler() {\n    }\n    return HttpHandler;\n}());\n/**\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\n *\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\n *\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\n * through the interceptor chain.\n *\n * \\@stable\n * @abstract\n */\nvar HttpBackend = (function () {\n    function HttpBackend() {\n    }\n    return HttpBackend;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @record\n */\n/**\n * Immutable set of Http headers, with lazy parsing.\n * \\@stable\n */\nvar HttpHeaders = (function () {\n    function HttpHeaders(headers) {\n        var _this = this;\n        /**\n         * Internal map of lowercased header names to the normalized\n         * form of the name (the form seen first).\n         */\n        this.normalizedNames = new Map();\n        /**\n         * Queued updates to be materialized the next initialization.\n         */\n        this.lazyUpdate = null;\n        if (!headers) {\n            this.headers = new Map();\n        }\n        else if (typeof headers === 'string') {\n            this.lazyInit = function () {\n                _this.headers = new Map();\n                headers.split('\\n').forEach(function (line) {\n                    var /** @type {?} */ index = line.indexOf(':');\n                    if (index > 0) {\n                        var /** @type {?} */ name_1 = line.slice(0, index);\n                        var /** @type {?} */ key = name_1.toLowerCase();\n                        var /** @type {?} */ value = line.slice(index + 1).trim();\n                        _this.maybeSetNormalizedName(name_1, key);\n                        if (_this.headers.has(key)) {\n                            /** @type {?} */ ((_this.headers.get(key))).push(value);\n                        }\n                        else {\n                            _this.headers.set(key, [value]);\n                        }\n                    }\n                });\n            };\n        }\n        else {\n            this.lazyInit = function () {\n                _this.headers = new Map();\n                Object.keys(headers).forEach(function (name) {\n                    var /** @type {?} */ values = headers[name];\n                    var /** @type {?} */ key = name.toLowerCase();\n                    if (typeof values === 'string') {\n                        values = [values];\n                    }\n                    if (values.length > 0) {\n                        _this.headers.set(key, values);\n                        _this.maybeSetNormalizedName(name, key);\n                    }\n                });\n            };\n        }\n    }\n    /**\n     * Checks for existence of header by given name.\n     */\n    /**\n     * Checks for existence of header by given name.\n     * @param {?} name\n     * @return {?}\n     */\n    HttpHeaders.prototype.has = /**\n     * Checks for existence of header by given name.\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        this.init();\n        return this.headers.has(name.toLowerCase());\n    };\n    /**\n     * Returns first header that matches given name.\n     */\n    /**\n     * Returns first header that matches given name.\n     * @param {?} name\n     * @return {?}\n     */\n    HttpHeaders.prototype.get = /**\n     * Returns first header that matches given name.\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        this.init();\n        var /** @type {?} */ values = this.headers.get(name.toLowerCase());\n        return values && values.length > 0 ? values[0] : null;\n    };\n    /**\n     * Returns the names of the headers\n     */\n    /**\n     * Returns the names of the headers\n     * @return {?}\n     */\n    HttpHeaders.prototype.keys = /**\n     * Returns the names of the headers\n     * @return {?}\n     */\n    function () {\n        this.init();\n        return Array.from(this.normalizedNames.values());\n    };\n    /**\n     * Returns list of header values for a given name.\n     */\n    /**\n     * Returns list of header values for a given name.\n     * @param {?} name\n     * @return {?}\n     */\n    HttpHeaders.prototype.getAll = /**\n     * Returns list of header values for a given name.\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        this.init();\n        return this.headers.get(name.toLowerCase()) || null;\n    };\n    /**\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    HttpHeaders.prototype.append = /**\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    function (name, value) {\n        return this.clone({ name: name, value: value, op: 'a' });\n    };\n    /**\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    HttpHeaders.prototype.set = /**\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    function (name, value) {\n        return this.clone({ name: name, value: value, op: 's' });\n    };\n    /**\n     * @param {?} name\n     * @param {?=} value\n     * @return {?}\n     */\n    HttpHeaders.prototype.delete = /**\n     * @param {?} name\n     * @param {?=} value\n     * @return {?}\n     */\n    function (name, value) {\n        return this.clone({ name: name, value: value, op: 'd' });\n    };\n    /**\n     * @param {?} name\n     * @param {?} lcName\n     * @return {?}\n     */\n    HttpHeaders.prototype.maybeSetNormalizedName = /**\n     * @param {?} name\n     * @param {?} lcName\n     * @return {?}\n     */\n    function (name, lcName) {\n        if (!this.normalizedNames.has(lcName)) {\n            this.normalizedNames.set(lcName, name);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    HttpHeaders.prototype.init = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (!!this.lazyInit) {\n            if (this.lazyInit instanceof HttpHeaders) {\n                this.copyFrom(this.lazyInit);\n            }\n            else {\n                this.lazyInit();\n            }\n            this.lazyInit = null;\n            if (!!this.lazyUpdate) {\n                this.lazyUpdate.forEach(function (update) { return _this.applyUpdate(update); });\n                this.lazyUpdate = null;\n            }\n        }\n    };\n    /**\n     * @param {?} other\n     * @return {?}\n     */\n    HttpHeaders.prototype.copyFrom = /**\n     * @param {?} other\n     * @return {?}\n     */\n    function (other) {\n        var _this = this;\n        other.init();\n        Array.from(other.headers.keys()).forEach(function (key) {\n            _this.headers.set(key, /** @type {?} */ ((other.headers.get(key))));\n            _this.normalizedNames.set(key, /** @type {?} */ ((other.normalizedNames.get(key))));\n        });\n    };\n    /**\n     * @param {?} update\n     * @return {?}\n     */\n    HttpHeaders.prototype.clone = /**\n     * @param {?} update\n     * @return {?}\n     */\n    function (update) {\n        var /** @type {?} */ clone = new HttpHeaders();\n        clone.lazyInit =\n            (!!this.lazyInit && this.lazyInit instanceof HttpHeaders) ? this.lazyInit : this;\n        clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\n        return clone;\n    };\n    /**\n     * @param {?} update\n     * @return {?}\n     */\n    HttpHeaders.prototype.applyUpdate = /**\n     * @param {?} update\n     * @return {?}\n     */\n    function (update) {\n        var /** @type {?} */ key = update.name.toLowerCase();\n        switch (update.op) {\n            case 'a':\n            case 's':\n                var /** @type {?} */ value = /** @type {?} */ ((update.value));\n                if (typeof value === 'string') {\n                    value = [value];\n                }\n                if (value.length === 0) {\n                    return;\n                }\n                this.maybeSetNormalizedName(update.name, key);\n                var /** @type {?} */ base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\n                base.push.apply(base, value);\n                this.headers.set(key, base);\n                break;\n            case 'd':\n                var /** @type {?} */ toDelete_1 = /** @type {?} */ (update.value);\n                if (!toDelete_1) {\n                    this.headers.delete(key);\n                    this.normalizedNames.delete(key);\n                }\n                else {\n                    var /** @type {?} */ existing = this.headers.get(key);\n                    if (!existing) {\n                        return;\n                    }\n                    existing = existing.filter(function (value) { return toDelete_1.indexOf(value) === -1; });\n                    if (existing.length === 0) {\n                        this.headers.delete(key);\n                        this.normalizedNames.delete(key);\n                    }\n                    else {\n                        this.headers.set(key, existing);\n                    }\n                }\n                break;\n        }\n    };\n    /**\n     * @internal\n     */\n    /**\n     * \\@internal\n     * @param {?} fn\n     * @return {?}\n     */\n    HttpHeaders.prototype.forEach = /**\n     * \\@internal\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        var _this = this;\n        this.init();\n        Array.from(this.normalizedNames.keys())\n            .forEach(function (key) { return fn(/** @type {?} */ ((_this.normalizedNames.get(key))), /** @type {?} */ ((_this.headers.get(key)))); });\n    };\n    return HttpHeaders;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * A codec for encoding and decoding parameters in URLs.\n *\n * Used by `HttpParams`.\n *\n * \\@stable\n *\n * @record\n */\n\n/**\n * A `HttpParameterCodec` that uses `encodeURIComponent` and `decodeURIComponent` to\n * serialize and parse URL parameter keys and values.\n *\n * \\@stable\n */\nvar HttpUrlEncodingCodec = (function () {\n    function HttpUrlEncodingCodec() {\n    }\n    /**\n     * @param {?} k\n     * @return {?}\n     */\n    HttpUrlEncodingCodec.prototype.encodeKey = /**\n     * @param {?} k\n     * @return {?}\n     */\n    function (k) { return standardEncoding(k); };\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    HttpUrlEncodingCodec.prototype.encodeValue = /**\n     * @param {?} v\n     * @return {?}\n     */\n    function (v) { return standardEncoding(v); };\n    /**\n     * @param {?} k\n     * @return {?}\n     */\n    HttpUrlEncodingCodec.prototype.decodeKey = /**\n     * @param {?} k\n     * @return {?}\n     */\n    function (k) { return decodeURIComponent(k); };\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    HttpUrlEncodingCodec.prototype.decodeValue = /**\n     * @param {?} v\n     * @return {?}\n     */\n    function (v) { return decodeURIComponent(v); };\n    return HttpUrlEncodingCodec;\n}());\n/**\n * @param {?} rawParams\n * @param {?} codec\n * @return {?}\n */\nfunction paramParser(rawParams, codec) {\n    var /** @type {?} */ map$$1 = new Map();\n    if (rawParams.length > 0) {\n        var /** @type {?} */ params = rawParams.split('&');\n        params.forEach(function (param) {\n            var /** @type {?} */ eqIdx = param.indexOf('=');\n            var _a = eqIdx == -1 ?\n                [codec.decodeKey(param), ''] :\n                [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))], key = _a[0], val = _a[1];\n            var /** @type {?} */ list = map$$1.get(key) || [];\n            list.push(val);\n            map$$1.set(key, list);\n        });\n    }\n    return map$$1;\n}\n/**\n * @param {?} v\n * @return {?}\n */\nfunction standardEncoding(v) {\n    return encodeURIComponent(v)\n        .replace(/%40/gi, '@')\n        .replace(/%3A/gi, ':')\n        .replace(/%24/gi, '$')\n        .replace(/%2C/gi, ',')\n        .replace(/%3B/gi, ';')\n        .replace(/%2B/gi, '+')\n        .replace(/%3D/gi, '=')\n        .replace(/%3F/gi, '?')\n        .replace(/%2F/gi, '/');\n}\n/**\n * Options used to construct an `HttpParams` instance.\n * @record\n */\n\n/**\n * An HTTP request/response body that represents serialized parameters,\n * per the MIME type `application/x-www-form-urlencoded`.\n *\n * This class is immutable - all mutation operations return a new instance.\n *\n * \\@stable\n */\nvar HttpParams = (function () {\n    function HttpParams(options) {\n        if (options === void 0) { options = /** @type {?} */ ({}); }\n        var _this = this;\n        this.updates = null;\n        this.cloneFrom = null;\n        this.encoder = options.encoder || new HttpUrlEncodingCodec();\n        if (!!options.fromString) {\n            if (!!options.fromObject) {\n                throw new Error(\"Cannot specify both fromString and fromObject.\");\n            }\n            this.map = paramParser(options.fromString, this.encoder);\n        }\n        else if (!!options.fromObject) {\n            this.map = new Map();\n            Object.keys(options.fromObject).forEach(function (key) {\n                var /** @type {?} */ value = (/** @type {?} */ (options.fromObject))[key]; /** @type {?} */\n                ((_this.map)).set(key, Array.isArray(value) ? value : [value]);\n            });\n        }\n        else {\n            this.map = null;\n        }\n    }\n    /**\n     * Check whether the body has one or more values for the given parameter name.\n     */\n    /**\n     * Check whether the body has one or more values for the given parameter name.\n     * @param {?} param\n     * @return {?}\n     */\n    HttpParams.prototype.has = /**\n     * Check whether the body has one or more values for the given parameter name.\n     * @param {?} param\n     * @return {?}\n     */\n    function (param) {\n        this.init();\n        return /** @type {?} */ ((this.map)).has(param);\n    };\n    /**\n     * Get the first value for the given parameter name, or `null` if it's not present.\n     */\n    /**\n     * Get the first value for the given parameter name, or `null` if it's not present.\n     * @param {?} param\n     * @return {?}\n     */\n    HttpParams.prototype.get = /**\n     * Get the first value for the given parameter name, or `null` if it's not present.\n     * @param {?} param\n     * @return {?}\n     */\n    function (param) {\n        this.init();\n        var /** @type {?} */ res = /** @type {?} */ ((this.map)).get(param);\n        return !!res ? res[0] : null;\n    };\n    /**\n     * Get all values for the given parameter name, or `null` if it's not present.\n     */\n    /**\n     * Get all values for the given parameter name, or `null` if it's not present.\n     * @param {?} param\n     * @return {?}\n     */\n    HttpParams.prototype.getAll = /**\n     * Get all values for the given parameter name, or `null` if it's not present.\n     * @param {?} param\n     * @return {?}\n     */\n    function (param) {\n        this.init();\n        return /** @type {?} */ ((this.map)).get(param) || null;\n    };\n    /**\n     * Get all the parameter names for this body.\n     */\n    /**\n     * Get all the parameter names for this body.\n     * @return {?}\n     */\n    HttpParams.prototype.keys = /**\n     * Get all the parameter names for this body.\n     * @return {?}\n     */\n    function () {\n        this.init();\n        return Array.from(/** @type {?} */ ((this.map)).keys());\n    };\n    /**\n     * Construct a new body with an appended value for the given parameter name.\n     */\n    /**\n     * Construct a new body with an appended value for the given parameter name.\n     * @param {?} param\n     * @param {?} value\n     * @return {?}\n     */\n    HttpParams.prototype.append = /**\n     * Construct a new body with an appended value for the given parameter name.\n     * @param {?} param\n     * @param {?} value\n     * @return {?}\n     */\n    function (param, value) { return this.clone({ param: param, value: value, op: 'a' }); };\n    /**\n     * Construct a new body with a new value for the given parameter name.\n     */\n    /**\n     * Construct a new body with a new value for the given parameter name.\n     * @param {?} param\n     * @param {?} value\n     * @return {?}\n     */\n    HttpParams.prototype.set = /**\n     * Construct a new body with a new value for the given parameter name.\n     * @param {?} param\n     * @param {?} value\n     * @return {?}\n     */\n    function (param, value) { return this.clone({ param: param, value: value, op: 's' }); };\n    /**\n     * Construct a new body with either the given value for the given parameter\n     * removed, if a value is given, or all values for the given parameter removed\n     * if not.\n     */\n    /**\n     * Construct a new body with either the given value for the given parameter\n     * removed, if a value is given, or all values for the given parameter removed\n     * if not.\n     * @param {?} param\n     * @param {?=} value\n     * @return {?}\n     */\n    HttpParams.prototype.delete = /**\n     * Construct a new body with either the given value for the given parameter\n     * removed, if a value is given, or all values for the given parameter removed\n     * if not.\n     * @param {?} param\n     * @param {?=} value\n     * @return {?}\n     */\n    function (param, value) { return this.clone({ param: param, value: value, op: 'd' }); };\n    /**\n     * Serialize the body to an encoded string, where key-value pairs (separated by `=`) are\n     * separated by `&`s.\n     */\n    /**\n     * Serialize the body to an encoded string, where key-value pairs (separated by `=`) are\n     * separated by `&`s.\n     * @return {?}\n     */\n    HttpParams.prototype.toString = /**\n     * Serialize the body to an encoded string, where key-value pairs (separated by `=`) are\n     * separated by `&`s.\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this.init();\n        return this.keys()\n            .map(function (key) {\n            var /** @type {?} */ eKey = _this.encoder.encodeKey(key);\n            return /** @type {?} */ ((/** @type {?} */ ((_this.map)).get(key))).map(function (value) { return eKey + '=' + _this.encoder.encodeValue(value); }).join('&');\n        })\n            .join('&');\n    };\n    /**\n     * @param {?} update\n     * @return {?}\n     */\n    HttpParams.prototype.clone = /**\n     * @param {?} update\n     * @return {?}\n     */\n    function (update) {\n        var /** @type {?} */ clone = new HttpParams(/** @type {?} */ ({ encoder: this.encoder }));\n        clone.cloneFrom = this.cloneFrom || this;\n        clone.updates = (this.updates || []).concat([update]);\n        return clone;\n    };\n    /**\n     * @return {?}\n     */\n    HttpParams.prototype.init = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (this.map === null) {\n            this.map = new Map();\n        }\n        if (this.cloneFrom !== null) {\n            this.cloneFrom.init();\n            this.cloneFrom.keys().forEach(function (key) { return /** @type {?} */ ((_this.map)).set(key, /** @type {?} */ ((/** @type {?} */ ((/** @type {?} */ ((_this.cloneFrom)).map)).get(key)))); }); /** @type {?} */\n            ((this.updates)).forEach(function (update) {\n                switch (update.op) {\n                    case 'a':\n                    case 's':\n                        var /** @type {?} */ base = (update.op === 'a' ? /** @type {?} */ ((_this.map)).get(update.param) : undefined) || [];\n                        base.push(/** @type {?} */ ((update.value))); /** @type {?} */\n                        ((_this.map)).set(update.param, base);\n                        break;\n                    case 'd':\n                        if (update.value !== undefined) {\n                            var /** @type {?} */ base_1 = /** @type {?} */ ((_this.map)).get(update.param) || [];\n                            var /** @type {?} */ idx = base_1.indexOf(update.value);\n                            if (idx !== -1) {\n                                base_1.splice(idx, 1);\n                            }\n                            if (base_1.length > 0) {\n                                /** @type {?} */ ((_this.map)).set(update.param, base_1);\n                            }\n                            else {\n                                /** @type {?} */ ((_this.map)).delete(update.param);\n                            }\n                        }\n                        else {\n                            /** @type {?} */ ((_this.map)).delete(update.param);\n                            break;\n                        }\n                }\n            });\n            this.cloneFrom = null;\n        }\n    };\n    return HttpParams;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Determine whether the given HTTP method may include a body.\n * @param {?} method\n * @return {?}\n */\nfunction mightHaveBody(method) {\n    switch (method) {\n        case 'DELETE':\n        case 'GET':\n        case 'HEAD':\n        case 'OPTIONS':\n        case 'JSONP':\n            return false;\n        default:\n            return true;\n    }\n}\n/**\n * Safely assert whether the given value is an ArrayBuffer.\n *\n * In some execution environments ArrayBuffer is not defined.\n * @param {?} value\n * @return {?}\n */\nfunction isArrayBuffer(value) {\n    return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\n}\n/**\n * Safely assert whether the given value is a Blob.\n *\n * In some execution environments Blob is not defined.\n * @param {?} value\n * @return {?}\n */\nfunction isBlob(value) {\n    return typeof Blob !== 'undefined' && value instanceof Blob;\n}\n/**\n * Safely assert whether the given value is a FormData instance.\n *\n * In some execution environments FormData is not defined.\n * @param {?} value\n * @return {?}\n */\nfunction isFormData(value) {\n    return typeof FormData !== 'undefined' && value instanceof FormData;\n}\n/**\n * An outgoing HTTP request with an optional typed body.\n *\n * `HttpRequest` represents an outgoing request, including URL, method,\n * headers, body, and other request configuration options. Instances should be\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\n * method should be used.\n *\n * \\@stable\n */\nvar HttpRequest = (function () {\n    function HttpRequest(method, url, third, fourth) {\n        this.url = url;\n        /**\n         * The request body, or `null` if one isn't set.\n         *\n         * Bodies are not enforced to be immutable, as they can include a reference to any\n         * user-defined data type. However, interceptors should take care to preserve\n         * idempotence by treating them as such.\n         */\n        this.body = null;\n        /**\n         * Whether this request should be made in a way that exposes progress events.\n         *\n         * Progress events are expensive (change detection runs on each event) and so\n         * they should only be requested if the consumer intends to monitor them.\n         */\n        this.reportProgress = false;\n        /**\n         * Whether this request should be sent with outgoing credentials (cookies).\n         */\n        this.withCredentials = false;\n        /**\n         * The expected response type of the server.\n         *\n         * This is used to parse the response appropriately before returning it to\n         * the requestee.\n         */\n        this.responseType = 'json';\n        this.method = method.toUpperCase();\n        // Next, need to figure out which argument holds the HttpRequestInit\n        // options, if any.\n        var /** @type {?} */ options;\n        // Check whether a body argument is expected. The only valid way to omit\n        // the body argument is to use a known no-body method like GET.\n        if (mightHaveBody(this.method) || !!fourth) {\n            // Body is the third argument, options are the fourth.\n            this.body = /** @type {?} */ (third) || null;\n            options = fourth;\n        }\n        else {\n            // No body required, options are the third argument. The body stays null.\n            options = /** @type {?} */ (third);\n        }\n        // If options have been passed, interpret them.\n        if (options) {\n            // Normalize reportProgress and withCredentials.\n            this.reportProgress = !!options.reportProgress;\n            this.withCredentials = !!options.withCredentials;\n            // Override default response type of 'json' if one is provided.\n            if (!!options.responseType) {\n                this.responseType = options.responseType;\n            }\n            // Override headers if they're provided.\n            if (!!options.headers) {\n                this.headers = options.headers;\n            }\n            if (!!options.params) {\n                this.params = options.params;\n            }\n        }\n        // If no headers have been passed in, construct a new HttpHeaders instance.\n        if (!this.headers) {\n            this.headers = new HttpHeaders();\n        }\n        // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\n        if (!this.params) {\n            this.params = new HttpParams();\n            this.urlWithParams = url;\n        }\n        else {\n            // Encode the parameters to a string in preparation for inclusion in the URL.\n            var /** @type {?} */ params = this.params.toString();\n            if (params.length === 0) {\n                // No parameters, the visible URL is just the URL given at creation time.\n                this.urlWithParams = url;\n            }\n            else {\n                // Does the URL already have query parameters? Look for '?'.\n                var /** @type {?} */ qIdx = url.indexOf('?');\n                // There are 3 cases to handle:\n                // 1) No existing parameters -> append '?' followed by params.\n                // 2) '?' exists and is followed by existing query string ->\n                //    append '&' followed by params.\n                // 3) '?' exists at the end of the url -> append params directly.\n                // This basically amounts to determining the character, if any, with\n                // which to join the URL and parameters.\n                var /** @type {?} */ sep = qIdx === -1 ? '?' : (qIdx < url.length - 1 ? '&' : '');\n                this.urlWithParams = url + sep + params;\n            }\n        }\n    }\n    /**\n     * Transform the free-form body into a serialized format suitable for\n     * transmission to the server.\n     */\n    /**\n     * Transform the free-form body into a serialized format suitable for\n     * transmission to the server.\n     * @return {?}\n     */\n    HttpRequest.prototype.serializeBody = /**\n     * Transform the free-form body into a serialized format suitable for\n     * transmission to the server.\n     * @return {?}\n     */\n    function () {\n        // If no body is present, no need to serialize it.\n        if (this.body === null) {\n            return null;\n        }\n        // Check whether the body is already in a serialized form. If so,\n        // it can just be returned directly.\n        if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) ||\n            typeof this.body === 'string') {\n            return this.body;\n        }\n        // Check whether the body is an instance of HttpUrlEncodedParams.\n        if (this.body instanceof HttpParams) {\n            return this.body.toString();\n        }\n        // Check whether the body is an object or array, and serialize with JSON if so.\n        if (typeof this.body === 'object' || typeof this.body === 'boolean' ||\n            Array.isArray(this.body)) {\n            return JSON.stringify(this.body);\n        }\n        // Fall back on toString() for everything else.\n        return (/** @type {?} */ (this.body)).toString();\n    };\n    /**\n     * Examine the body and attempt to infer an appropriate MIME type\n     * for it.\n     *\n     * If no such type can be inferred, this method will return `null`.\n     */\n    /**\n     * Examine the body and attempt to infer an appropriate MIME type\n     * for it.\n     *\n     * If no such type can be inferred, this method will return `null`.\n     * @return {?}\n     */\n    HttpRequest.prototype.detectContentTypeHeader = /**\n     * Examine the body and attempt to infer an appropriate MIME type\n     * for it.\n     *\n     * If no such type can be inferred, this method will return `null`.\n     * @return {?}\n     */\n    function () {\n        // An empty body has no content type.\n        if (this.body === null) {\n            return null;\n        }\n        // FormData bodies rely on the browser's content type assignment.\n        if (isFormData(this.body)) {\n            return null;\n        }\n        // Blobs usually have their own content type. If it doesn't, then\n        // no type can be inferred.\n        if (isBlob(this.body)) {\n            return this.body.type || null;\n        }\n        // Array buffers have unknown contents and thus no type can be inferred.\n        if (isArrayBuffer(this.body)) {\n            return null;\n        }\n        // Technically, strings could be a form of JSON data, but it's safe enough\n        // to assume they're plain strings.\n        if (typeof this.body === 'string') {\n            return 'text/plain';\n        }\n        // `HttpUrlEncodedParams` has its own content-type.\n        if (this.body instanceof HttpParams) {\n            return 'application/x-www-form-urlencoded;charset=UTF-8';\n        }\n        // Arrays, objects, and numbers will be encoded as JSON.\n        if (typeof this.body === 'object' || typeof this.body === 'number' ||\n            Array.isArray(this.body)) {\n            return 'application/json';\n        }\n        // No type could be inferred.\n        return null;\n    };\n    /**\n     * @param {?=} update\n     * @return {?}\n     */\n    HttpRequest.prototype.clone = /**\n     * @param {?=} update\n     * @return {?}\n     */\n    function (update) {\n        if (update === void 0) { update = {}; }\n        // For method, url, and responseType, take the current value unless\n        // it is overridden in the update hash.\n        var /** @type {?} */ method = update.method || this.method;\n        var /** @type {?} */ url = update.url || this.url;\n        var /** @type {?} */ responseType = update.responseType || this.responseType;\n        // The body is somewhat special - a `null` value in update.body means\n        // whatever current body is present is being overridden with an empty\n        // body, whereas an `undefined` value in update.body implies no\n        // override.\n        var /** @type {?} */ body = (update.body !== undefined) ? update.body : this.body;\n        // Carefully handle the boolean options to differentiate between\n        // `false` and `undefined` in the update args.\n        var /** @type {?} */ withCredentials = (update.withCredentials !== undefined) ? update.withCredentials : this.withCredentials;\n        var /** @type {?} */ reportProgress = (update.reportProgress !== undefined) ? update.reportProgress : this.reportProgress;\n        // Headers and params may be appended to if `setHeaders` or\n        // `setParams` are used.\n        var /** @type {?} */ headers = update.headers || this.headers;\n        var /** @type {?} */ params = update.params || this.params;\n        // Check whether the caller has asked to add headers.\n        if (update.setHeaders !== undefined) {\n            // Set every requested header.\n            headers =\n                Object.keys(update.setHeaders)\n                    .reduce(function (headers, name) { return headers.set(name, /** @type {?} */ ((update.setHeaders))[name]); }, headers);\n        }\n        // Check whether the caller has asked to set params.\n        if (update.setParams) {\n            // Set every requested param.\n            params = Object.keys(update.setParams)\n                .reduce(function (params, param) { return params.set(param, /** @type {?} */ ((update.setParams))[param]); }, params);\n        }\n        // Finally, construct the new HttpRequest using the pieces from above.\n        return new HttpRequest(method, url, body, {\n            params: params, headers: headers, reportProgress: reportProgress, responseType: responseType, withCredentials: withCredentials,\n        });\n    };\n    return HttpRequest;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @enum {number} */\nvar HttpEventType = {\n    /**\n       * The request was sent out over the wire.\n       */\n    Sent: 0,\n    /**\n       * An upload progress event was received.\n       */\n    UploadProgress: 1,\n    /**\n       * The response status code and headers were received.\n       */\n    ResponseHeader: 2,\n    /**\n       * A download progress event was received.\n       */\n    DownloadProgress: 3,\n    /**\n       * The full response including the body was received.\n       */\n    Response: 4,\n    /**\n       * A custom event from an interceptor or a backend.\n       */\n    User: 5,\n};\nHttpEventType[HttpEventType.Sent] = \"Sent\";\nHttpEventType[HttpEventType.UploadProgress] = \"UploadProgress\";\nHttpEventType[HttpEventType.ResponseHeader] = \"ResponseHeader\";\nHttpEventType[HttpEventType.DownloadProgress] = \"DownloadProgress\";\nHttpEventType[HttpEventType.Response] = \"Response\";\nHttpEventType[HttpEventType.User] = \"User\";\n/**\n * Base interface for progress events.\n *\n * \\@stable\n * @record\n */\n\n/**\n * A download progress event.\n *\n * \\@stable\n * @record\n */\n\n/**\n * An upload progress event.\n *\n * \\@stable\n * @record\n */\n\n/**\n * An event indicating that the request was sent to the server. Useful\n * when a request may be retried multiple times, to distinguish between\n * retries on the final event stream.\n *\n * \\@stable\n * @record\n */\n\n/**\n * A user-defined event.\n *\n * Grouping all custom events under this type ensures they will be handled\n * and forwarded by all implementations of interceptors.\n *\n * \\@stable\n * @record\n */\n\n/**\n * An error that represents a failed attempt to JSON.parse text coming back\n * from the server.\n *\n * It bundles the Error object with the actual response body that failed to parse.\n *\n * \\@stable\n * @record\n */\n\n/**\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\n *\n * \\@stable\n * @abstract\n */\nvar HttpResponseBase = (function () {\n    /**\n     * Super-constructor for all responses.\n     *\n     * The single parameter accepted is an initialization hash. Any properties\n     * of the response passed there will override the default values.\n     */\n    function HttpResponseBase(init, defaultStatus, defaultStatusText) {\n        if (defaultStatus === void 0) { defaultStatus = 200; }\n        if (defaultStatusText === void 0) { defaultStatusText = 'OK'; }\n        // If the hash has values passed, use them to initialize the response.\n        // Otherwise use the default values.\n        this.headers = init.headers || new HttpHeaders();\n        this.status = init.status !== undefined ? init.status : defaultStatus;\n        this.statusText = init.statusText || defaultStatusText;\n        this.url = init.url || null;\n        // Cache the ok value to avoid defining a getter.\n        this.ok = this.status >= 200 && this.status < 300;\n    }\n    return HttpResponseBase;\n}());\n/**\n * A partial HTTP response which only includes the status and header data,\n * but no response body.\n *\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\n * event stream, only when progress events are requested.\n *\n * \\@stable\n */\nvar http_HttpHeaderResponse = (function (_super) {\n    Object(tslib_es6[\"b\" /* __extends */])(HttpHeaderResponse, _super);\n    /**\n     * Create a new `HttpHeaderResponse` with the given parameters.\n     */\n    function HttpHeaderResponse(init) {\n        if (init === void 0) { init = {}; }\n        var _this = _super.call(this, init) || this;\n        _this.type = HttpEventType.ResponseHeader;\n        return _this;\n    }\n    /**\n     * Copy this `HttpHeaderResponse`, overriding its contents with the\n     * given parameter hash.\n     */\n    /**\n     * Copy this `HttpHeaderResponse`, overriding its contents with the\n     * given parameter hash.\n     * @param {?=} update\n     * @return {?}\n     */\n    HttpHeaderResponse.prototype.clone = /**\n     * Copy this `HttpHeaderResponse`, overriding its contents with the\n     * given parameter hash.\n     * @param {?=} update\n     * @return {?}\n     */\n    function (update) {\n        if (update === void 0) { update = {}; }\n        // Perform a straightforward initialization of the new HttpHeaderResponse,\n        // overriding the current parameters with new ones if given.\n        return new HttpHeaderResponse({\n            headers: update.headers || this.headers,\n            status: update.status !== undefined ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    };\n    return HttpHeaderResponse;\n}(HttpResponseBase));\n/**\n * A full HTTP response, including a typed response body (which may be `null`\n * if one was not returned).\n *\n * `HttpResponse` is a `HttpEvent` available on the response event\n * stream.\n *\n * \\@stable\n */\nvar http_HttpResponse = (function (_super) {\n    Object(tslib_es6[\"b\" /* __extends */])(HttpResponse, _super);\n    /**\n     * Construct a new `HttpResponse`.\n     */\n    function HttpResponse(init) {\n        if (init === void 0) { init = {}; }\n        var _this = _super.call(this, init) || this;\n        _this.type = HttpEventType.Response;\n        _this.body = init.body || null;\n        return _this;\n    }\n    /**\n     * @param {?=} update\n     * @return {?}\n     */\n    HttpResponse.prototype.clone = /**\n     * @param {?=} update\n     * @return {?}\n     */\n    function (update) {\n        if (update === void 0) { update = {}; }\n        return new HttpResponse({\n            body: (update.body !== undefined) ? update.body : this.body,\n            headers: update.headers || this.headers,\n            status: (update.status !== undefined) ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    };\n    return HttpResponse;\n}(HttpResponseBase));\n/**\n * A response that represents an error or failure, either from a\n * non-successful HTTP status, an error while executing the request,\n * or some other failure which occurred during the parsing of the response.\n *\n * Any error returned on the `Observable` response stream will be\n * wrapped in an `HttpErrorResponse` to provide additional context about\n * the state of the HTTP layer when the error occurred. The error property\n * will contain either a wrapped Error object or the error response returned\n * from the server.\n *\n * \\@stable\n */\nvar http_HttpErrorResponse = (function (_super) {\n    Object(tslib_es6[\"b\" /* __extends */])(HttpErrorResponse, _super);\n    function HttpErrorResponse(init) {\n        var _this = \n        // Initialize with a default status of 0 / Unknown Error.\n        _super.call(this, init, 0, 'Unknown Error') || this;\n        _this.name = 'HttpErrorResponse';\n        /**\n         * Errors are never okay, even when the status code is in the 2xx success range.\n         */\n        _this.ok = false;\n        // If the response was successful, then this was a parse error. Otherwise, it was\n        // a protocol-level failure of some sort. Either the request failed in transit\n        // or the server returned an unsuccessful status code.\n        if (_this.status >= 200 && _this.status < 300) {\n            _this.message = \"Http failure during parsing for \" + (init.url || '(unknown url)');\n        }\n        else {\n            _this.message =\n                \"Http failure response for \" + (init.url || '(unknown url)') + \": \" + init.status + \" \" + init.statusText;\n        }\n        _this.error = init.error || null;\n        return _this;\n    }\n    return HttpErrorResponse;\n}(HttpResponseBase));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Construct an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\n * the given `body`. Basically, this clones the object and adds the body.\n * @template T\n * @param {?} options\n * @param {?} body\n * @return {?}\n */\nfunction addBody(options, body) {\n    return {\n        body: body,\n        headers: options.headers,\n        observe: options.observe,\n        params: options.params,\n        reportProgress: options.reportProgress,\n        responseType: options.responseType,\n        withCredentials: options.withCredentials,\n    };\n}\n/**\n * Perform HTTP requests.\n *\n * `HttpClient` is available as an injectable class, with methods to perform HTTP requests.\n * Each request method has multiple signatures, and the return type varies according to which\n * signature is called (mainly the values of `observe` and `responseType`).\n *\n * \\@stable\n */\nvar http_HttpClient = (function () {\n    function HttpClient(handler) {\n        this.handler = handler;\n    }\n    /**\n     * Constructs an `Observable` for a particular HTTP request that, when subscribed,\n     * fires the request through the chain of registered interceptors and on to the\n     * server.\n     *\n     * This method can be called in one of two ways. Either an `HttpRequest`\n     * instance can be passed directly as the only parameter, or a method can be\n     * passed as the first parameter, a string URL as the second, and an\n     * options hash as the third.\n     *\n     * If a `HttpRequest` object is passed directly, an `Observable` of the\n     * raw `HttpEvent` stream will be returned.\n     *\n     * If a request is instead built by providing a URL, the options object\n     * determines the return type of `request()`. In addition to configuring\n     * request parameters such as the outgoing headers and/or the body, the options\n     * hash specifies two key pieces of information about the request: the\n     * `responseType` and what to `observe`.\n     *\n     * The `responseType` value determines how a successful response body will be\n     * parsed. If `responseType` is the default `json`, a type interface for the\n     * resulting object may be passed as a type parameter to `request()`.\n     *\n     * The `observe` value determines the return type of `request()`, based on what\n     * the consumer is interested in observing. A value of `events` will return an\n     * `Observable<HttpEvent>` representing the raw `HttpEvent` stream,\n     * including progress events by default. A value of `response` will return an\n     * `Observable<HttpResponse<T>>` where the `T` parameter of `HttpResponse`\n     * depends on the `responseType` and any optionally provided type parameter.\n     * A value of `body` will return an `Observable<T>` with the same `T` body type.\n     */\n    /**\n     * Constructs an `Observable` for a particular HTTP request that, when subscribed,\n     * fires the request through the chain of registered interceptors and on to the\n     * server.\n     *\n     * This method can be called in one of two ways. Either an `HttpRequest`\n     * instance can be passed directly as the only parameter, or a method can be\n     * passed as the first parameter, a string URL as the second, and an\n     * options hash as the third.\n     *\n     * If a `HttpRequest` object is passed directly, an `Observable` of the\n     * raw `HttpEvent` stream will be returned.\n     *\n     * If a request is instead built by providing a URL, the options object\n     * determines the return type of `request()`. In addition to configuring\n     * request parameters such as the outgoing headers and/or the body, the options\n     * hash specifies two key pieces of information about the request: the\n     * `responseType` and what to `observe`.\n     *\n     * The `responseType` value determines how a successful response body will be\n     * parsed. If `responseType` is the default `json`, a type interface for the\n     * resulting object may be passed as a type parameter to `request()`.\n     *\n     * The `observe` value determines the return type of `request()`, based on what\n     * the consumer is interested in observing. A value of `events` will return an\n     * `Observable<HttpEvent>` representing the raw `HttpEvent` stream,\n     * including progress events by default. A value of `response` will return an\n     * `Observable<HttpResponse<T>>` where the `T` parameter of `HttpResponse`\n     * depends on the `responseType` and any optionally provided type parameter.\n     * A value of `body` will return an `Observable<T>` with the same `T` body type.\n     * @param {?} first\n     * @param {?=} url\n     * @param {?=} options\n     * @return {?}\n     */\n    HttpClient.prototype.request = /**\n     * Constructs an `Observable` for a particular HTTP request that, when subscribed,\n     * fires the request through the chain of registered interceptors and on to the\n     * server.\n     *\n     * This method can be called in one of two ways. Either an `HttpRequest`\n     * instance can be passed directly as the only parameter, or a method can be\n     * passed as the first parameter, a string URL as the second, and an\n     * options hash as the third.\n     *\n     * If a `HttpRequest` object is passed directly, an `Observable` of the\n     * raw `HttpEvent` stream will be returned.\n     *\n     * If a request is instead built by providing a URL, the options object\n     * determines the return type of `request()`. In addition to configuring\n     * request parameters such as the outgoing headers and/or the body, the options\n     * hash specifies two key pieces of information about the request: the\n     * `responseType` and what to `observe`.\n     *\n     * The `responseType` value determines how a successful response body will be\n     * parsed. If `responseType` is the default `json`, a type interface for the\n     * resulting object may be passed as a type parameter to `request()`.\n     *\n     * The `observe` value determines the return type of `request()`, based on what\n     * the consumer is interested in observing. A value of `events` will return an\n     * `Observable<HttpEvent>` representing the raw `HttpEvent` stream,\n     * including progress events by default. A value of `response` will return an\n     * `Observable<HttpResponse<T>>` where the `T` parameter of `HttpResponse`\n     * depends on the `responseType` and any optionally provided type parameter.\n     * A value of `body` will return an `Observable<T>` with the same `T` body type.\n     * @param {?} first\n     * @param {?=} url\n     * @param {?=} options\n     * @return {?}\n     */\n    function (first, url, options) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        var /** @type {?} */ req;\n        // Firstly, check whether the primary argument is an instance of `HttpRequest`.\n        if (first instanceof HttpRequest) {\n            // It is. The other arguments must be undefined (per the signatures) and can be\n            // ignored.\n            req = /** @type {?} */ (first);\n        }\n        else {\n            // It's a string, so it represents a URL. Construct a request based on it,\n            // and incorporate the remaining arguments (assuming GET unless a method is\n            // provided.\n            // Figure out the headers.\n            var /** @type {?} */ headers = undefined;\n            if (!!options.headers !== undefined) {\n                if (options.headers instanceof HttpHeaders) {\n                    headers = options.headers;\n                }\n                else {\n                    headers = new HttpHeaders(options.headers);\n                }\n            }\n            // Sort out parameters.\n            var /** @type {?} */ params = undefined;\n            if (!!options.params) {\n                if (options.params instanceof HttpParams) {\n                    params = options.params;\n                }\n                else {\n                    params = new HttpParams(/** @type {?} */ ({ fromObject: options.params }));\n                }\n            }\n            // Construct the request.\n            req = new HttpRequest(first, /** @type {?} */ ((url)), options.body || null, {\n                headers: headers,\n                params: params,\n                reportProgress: options.reportProgress,\n                // By default, JSON is assumed to be returned for all calls.\n                responseType: options.responseType || 'json',\n                withCredentials: options.withCredentials,\n            });\n        }\n        // Start with an Observable.of() the initial request, and run the handler (which\n        // includes all interceptors) inside a concatMap(). This way, the handler runs\n        // inside an Observable chain, which causes interceptors to be re-run on every\n        // subscription (this also makes retries re-run the handler, including interceptors).\n        var /** @type {?} */ events$ = concatMap[\"concatMap\"].call(Object(of[\"of\"])(req), function (req) { return _this.handler.handle(req); });\n        // If coming via the API signature which accepts a previously constructed HttpRequest,\n        // the only option is to get the event stream. Otherwise, return the event stream if\n        // that is what was requested.\n        if (first instanceof HttpRequest || options.observe === 'events') {\n            return events$;\n        }\n        // The requested stream contains either the full response or the body. In either\n        // case, the first step is to filter the event stream to extract a stream of\n        // responses(s).\n        var /** @type {?} */ res$ = filter[\"filter\"].call(events$, function (event) { return event instanceof http_HttpResponse; });\n        // Decide which stream to return.\n        switch (options.observe || 'body') {\n            case 'body':\n                // The requested stream is the body. Map the response stream to the response\n                // body. This could be done more simply, but a misbehaving interceptor might\n                // transform the response body into a different format and ignore the requested\n                // responseType. Guard against this by validating that the response is of the\n                // requested type.\n                switch (req.responseType) {\n                    case 'arraybuffer':\n                        return map[\"map\"].call(res$, function (res) {\n                            // Validate that the body is an ArrayBuffer.\n                            if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\n                                throw new Error('Response is not an ArrayBuffer.');\n                            }\n                            return res.body;\n                        });\n                    case 'blob':\n                        return map[\"map\"].call(res$, function (res) {\n                            // Validate that the body is a Blob.\n                            if (res.body !== null && !(res.body instanceof Blob)) {\n                                throw new Error('Response is not a Blob.');\n                            }\n                            return res.body;\n                        });\n                    case 'text':\n                        return map[\"map\"].call(res$, function (res) {\n                            // Validate that the body is a string.\n                            if (res.body !== null && typeof res.body !== 'string') {\n                                throw new Error('Response is not a string.');\n                            }\n                            return res.body;\n                        });\n                    case 'json':\n                    default:\n                        // No validation needed for JSON responses, as they can be of any type.\n                        return map[\"map\"].call(res$, function (res) { return res.body; });\n                }\n            case 'response':\n                // The response stream was requested directly, so return it.\n                return res$;\n            default:\n                // Guard against new future observe types being added.\n                throw new Error(\"Unreachable: unhandled observe type \" + options.observe + \"}\");\n        }\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * DELETE request to be executed on the server. See the individual overloads for\n     * details of `delete()`'s return type based on the provided options.\n     */\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * DELETE request to be executed on the server. See the individual overloads for\n     * details of `delete()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    HttpClient.prototype.delete = /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * DELETE request to be executed on the server. See the individual overloads for\n     * details of `delete()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('DELETE', url, /** @type {?} */ (options));\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * GET request to be executed on the server. See the individual overloads for\n     * details of `get()`'s return type based on the provided options.\n     */\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * GET request to be executed on the server. See the individual overloads for\n     * details of `get()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    HttpClient.prototype.get = /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * GET request to be executed on the server. See the individual overloads for\n     * details of `get()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('GET', url, /** @type {?} */ (options));\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * HEAD request to be executed on the server. See the individual overloads for\n     * details of `head()`'s return type based on the provided options.\n     */\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * HEAD request to be executed on the server. See the individual overloads for\n     * details of `head()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    HttpClient.prototype.head = /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * HEAD request to be executed on the server. See the individual overloads for\n     * details of `head()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('HEAD', url, /** @type {?} */ (options));\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause a request\n     * with the special method `JSONP` to be dispatched via the interceptor pipeline.\n     *\n     * A suitable interceptor must be installed (e.g. via the `HttpClientJsonpModule`).\n     * If no such interceptor is reached, then the `JSONP` request will likely be\n     * rejected by the configured backend.\n     */\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause a request\n     * with the special method `JSONP` to be dispatched via the interceptor pipeline.\n     *\n     * A suitable interceptor must be installed (e.g. via the `HttpClientJsonpModule`).\n     * If no such interceptor is reached, then the `JSONP` request will likely be\n     * rejected by the configured backend.\n     * @template T\n     * @param {?} url\n     * @param {?} callbackParam\n     * @return {?}\n     */\n    HttpClient.prototype.jsonp = /**\n     * Constructs an `Observable` which, when subscribed, will cause a request\n     * with the special method `JSONP` to be dispatched via the interceptor pipeline.\n     *\n     * A suitable interceptor must be installed (e.g. via the `HttpClientJsonpModule`).\n     * If no such interceptor is reached, then the `JSONP` request will likely be\n     * rejected by the configured backend.\n     * @template T\n     * @param {?} url\n     * @param {?} callbackParam\n     * @return {?}\n     */\n    function (url, callbackParam) {\n        return this.request('JSONP', url, {\n            params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\n            observe: 'body',\n            responseType: 'json',\n        });\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * OPTIONS request to be executed on the server. See the individual overloads for\n     * details of `options()`'s return type based on the provided options.\n     */\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * OPTIONS request to be executed on the server. See the individual overloads for\n     * details of `options()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    HttpClient.prototype.options = /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * OPTIONS request to be executed on the server. See the individual overloads for\n     * details of `options()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('OPTIONS', url, /** @type {?} */ (options));\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * PATCH request to be executed on the server. See the individual overloads for\n     * details of `patch()`'s return type based on the provided options.\n     */\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * PATCH request to be executed on the server. See the individual overloads for\n     * details of `patch()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    HttpClient.prototype.patch = /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * PATCH request to be executed on the server. See the individual overloads for\n     * details of `patch()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, body, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('PATCH', url, addBody(options, body));\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * POST request to be executed on the server. See the individual overloads for\n     * details of `post()`'s return type based on the provided options.\n     */\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * POST request to be executed on the server. See the individual overloads for\n     * details of `post()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    HttpClient.prototype.post = /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * POST request to be executed on the server. See the individual overloads for\n     * details of `post()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, body, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('POST', url, addBody(options, body));\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * POST request to be executed on the server. See the individual overloads for\n     * details of `post()`'s return type based on the provided options.\n     */\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * POST request to be executed on the server. See the individual overloads for\n     * details of `post()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    HttpClient.prototype.put = /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * POST request to be executed on the server. See the individual overloads for\n     * details of `post()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, body, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('PUT', url, addBody(options, body));\n    };\n    HttpClient.decorators = [\n        { type: core[\"x\" /* Injectable */] },\n    ];\n    /** @nocollapse */\n    HttpClient.ctorParameters = function () { return [\n        { type: HttpHandler, },\n    ]; };\n    return HttpClient;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Intercepts `HttpRequest` and handles them.\n *\n * Most interceptors will transform the outgoing request before passing it to the\n * next interceptor in the chain, by calling `next.handle(transformedReq)`.\n *\n * In rare cases, interceptors may wish to completely handle a request themselves,\n * and not delegate to the remainder of the chain. This behavior is allowed.\n *\n * \\@stable\n * @record\n */\n\n/**\n * `HttpHandler` which applies an `HttpInterceptor` to an `HttpRequest`.\n *\n * \\@stable\n */\nvar HttpInterceptorHandler = (function () {\n    function HttpInterceptorHandler(next, interceptor) {\n        this.next = next;\n        this.interceptor = interceptor;\n    }\n    /**\n     * @param {?} req\n     * @return {?}\n     */\n    HttpInterceptorHandler.prototype.handle = /**\n     * @param {?} req\n     * @return {?}\n     */\n    function (req) {\n        return this.interceptor.intercept(req, this.next);\n    };\n    return HttpInterceptorHandler;\n}());\n/**\n * A multi-provider token which represents the array of `HttpInterceptor`s that\n * are registered.\n *\n * \\@stable\n */\nvar HTTP_INTERCEPTORS = new core[\"y\" /* InjectionToken */]('HTTP_INTERCEPTORS');\nvar http_NoopInterceptor = (function () {\n    function NoopInterceptor() {\n    }\n    /**\n     * @param {?} req\n     * @param {?} next\n     * @return {?}\n     */\n    NoopInterceptor.prototype.intercept = /**\n     * @param {?} req\n     * @param {?} next\n     * @return {?}\n     */\n    function (req, next) {\n        return next.handle(req);\n    };\n    NoopInterceptor.decorators = [\n        { type: core[\"x\" /* Injectable */] },\n    ];\n    /** @nocollapse */\n    NoopInterceptor.ctorParameters = function () { return []; };\n    return NoopInterceptor;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Every request made through JSONP needs a callback name that's unique across the\n// whole page. Each request is assigned an id and the callback name is constructed\n// from that. The next id to be assigned is tracked in a global variable here that\n// is shared among all applications on the page.\nvar nextRequestId = 0;\n// Error text given when a JSONP script is injected, but doesn't invoke the callback\n// passed in its URL.\nvar JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\n// Error text given when a request is passed to the JsonpClientBackend that doesn't\n// have a request method JSONP.\nvar JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\nvar JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';\n/**\n * DI token/abstract type representing a map of JSONP callbacks.\n *\n * In the browser, this should always be the `window` object.\n *\n * \\@stable\n * @abstract\n */\nvar JsonpCallbackContext = (function () {\n    function JsonpCallbackContext() {\n    }\n    return JsonpCallbackContext;\n}());\n/**\n * `HttpBackend` that only processes `HttpRequest` with the JSONP method,\n * by performing JSONP style requests.\n *\n * \\@stable\n */\nvar http_JsonpClientBackend = (function () {\n    function JsonpClientBackend(callbackMap, document) {\n        this.callbackMap = callbackMap;\n        this.document = document;\n    }\n    /**\n     * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n     * @return {?}\n     */\n    JsonpClientBackend.prototype.nextCallback = /**\n     * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n     * @return {?}\n     */\n    function () { return \"ng_jsonp_callback_\" + nextRequestId++; };\n    /**\n     * Process a JSONP request and return an event stream of the results.\n     */\n    /**\n     * Process a JSONP request and return an event stream of the results.\n     * @param {?} req\n     * @return {?}\n     */\n    JsonpClientBackend.prototype.handle = /**\n     * Process a JSONP request and return an event stream of the results.\n     * @param {?} req\n     * @return {?}\n     */\n    function (req) {\n        var _this = this;\n        // Firstly, check both the method and response type. If either doesn't match\n        // then the request was improperly routed here and cannot be handled.\n        if (req.method !== 'JSONP') {\n            throw new Error(JSONP_ERR_WRONG_METHOD);\n        }\n        else if (req.responseType !== 'json') {\n            throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);\n        }\n        // Everything else happens inside the Observable boundary.\n        return new Observable[\"Observable\"](function (observer) {\n            // The first step to make a request is to generate the callback name, and replace the\n            // callback placeholder in the URL with the name. Care has to be taken here to ensure\n            // a trailing &, if matched, gets inserted back into the URL in the correct place.\n            var /** @type {?} */ callback = _this.nextCallback();\n            var /** @type {?} */ url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, \"=\" + callback + \"$1\");\n            // Construct the <script> tag and point it at the URL.\n            var /** @type {?} */ node = _this.document.createElement('script');\n            node.src = url;\n            // A JSONP request requires waiting for multiple callbacks. These variables\n            // are closed over and track state across those callbacks.\n            // The response object, if one has been received, or null otherwise.\n            var /** @type {?} */ body = null;\n            // Whether the response callback has been called.\n            var /** @type {?} */ finished = false;\n            // Whether the request has been cancelled (and thus any other callbacks)\n            // should be ignored.\n            var /** @type {?} */ cancelled = false;\n            // Set the response callback in this.callbackMap (which will be the window\n            // object in the browser. The script being loaded via the <script> tag will\n            // eventually call this callback.\n            // Set the response callback in this.callbackMap (which will be the window\n            // object in the browser. The script being loaded via the <script> tag will\n            // eventually call this callback.\n            _this.callbackMap[callback] = function (data) {\n                // Data has been received from the JSONP script. Firstly, delete this callback.\n                delete _this.callbackMap[callback];\n                // Next, make sure the request wasn't cancelled in the meantime.\n                if (cancelled) {\n                    return;\n                }\n                // Set state to indicate data was received.\n                body = data;\n                finished = true;\n            };\n            // cleanup() is a utility closure that removes the <script> from the page and\n            // the response callback from the window. This logic is used in both the\n            // success, error, and cancellation paths, so it's extracted out for convenience.\n            var /** @type {?} */ cleanup = function () {\n                // Remove the <script> tag if it's still on the page.\n                if (node.parentNode) {\n                    node.parentNode.removeChild(node);\n                }\n                // Remove the response callback from the callbackMap (window object in the\n                // browser).\n                delete _this.callbackMap[callback];\n            };\n            // onLoad() is the success callback which runs after the response callback\n            // if the JSONP script loads successfully. The event itself is unimportant.\n            // If something went wrong, onLoad() may run without the response callback\n            // having been invoked.\n            var /** @type {?} */ onLoad = function (event) {\n                // Do nothing if the request has been cancelled.\n                if (cancelled) {\n                    return;\n                }\n                // Cleanup the page.\n                cleanup();\n                // Check whether the response callback has run.\n                if (!finished) {\n                    // It hasn't, something went wrong with the request. Return an error via\n                    // the Observable error path. All JSONP errors have status 0.\n                    observer.error(new http_HttpErrorResponse({\n                        url: url,\n                        status: 0,\n                        statusText: 'JSONP Error',\n                        error: new Error(JSONP_ERR_NO_CALLBACK),\n                    }));\n                    return;\n                }\n                // Success. body either contains the response body or null if none was\n                // returned.\n                observer.next(new http_HttpResponse({\n                    body: body,\n                    status: 200,\n                    statusText: 'OK', url: url,\n                }));\n                // Complete the stream, the resposne is over.\n                observer.complete();\n            };\n            // onError() is the error callback, which runs if the script returned generates\n            // a Javascript error. It emits the error via the Observable error channel as\n            // a HttpErrorResponse.\n            var /** @type {?} */ onError = function (error) {\n                // If the request was already cancelled, no need to emit anything.\n                if (cancelled) {\n                    return;\n                }\n                cleanup();\n                // Wrap the error in a HttpErrorResponse.\n                observer.error(new http_HttpErrorResponse({\n                    error: error,\n                    status: 0,\n                    statusText: 'JSONP Error', url: url,\n                }));\n            };\n            // Subscribe to both the success (load) and error events on the <script> tag,\n            // and add it to the page.\n            node.addEventListener('load', onLoad);\n            node.addEventListener('error', onError);\n            _this.document.body.appendChild(node);\n            // The request has now been successfully sent.\n            observer.next({ type: HttpEventType.Sent });\n            // Cancellation handler.\n            return function () {\n                // Track the cancellation so event listeners won't do anything even if already scheduled.\n                cancelled = true;\n                // Remove the event listeners so they won't run if the events later fire.\n                node.removeEventListener('load', onLoad);\n                node.removeEventListener('error', onError);\n                // And finally, clean up the page.\n                cleanup();\n            };\n        });\n    };\n    JsonpClientBackend.decorators = [\n        { type: core[\"x\" /* Injectable */] },\n    ];\n    /** @nocollapse */\n    JsonpClientBackend.ctorParameters = function () { return [\n        { type: JsonpCallbackContext, },\n        { type: undefined, decorators: [{ type: core[\"w\" /* Inject */], args: [common[\"d\" /* DOCUMENT */],] },] },\n    ]; };\n    return JsonpClientBackend;\n}());\n/**\n * An `HttpInterceptor` which identifies requests with the method JSONP and\n * shifts them to the `JsonpClientBackend`.\n *\n * \\@stable\n */\nvar http_JsonpInterceptor = (function () {\n    function JsonpInterceptor(jsonp) {\n        this.jsonp = jsonp;\n    }\n    /**\n     * @param {?} req\n     * @param {?} next\n     * @return {?}\n     */\n    JsonpInterceptor.prototype.intercept = /**\n     * @param {?} req\n     * @param {?} next\n     * @return {?}\n     */\n    function (req, next) {\n        if (req.method === 'JSONP') {\n            return this.jsonp.handle(/** @type {?} */ (req));\n        }\n        // Fall through for normal HTTP requests.\n        return next.handle(req);\n    };\n    JsonpInterceptor.decorators = [\n        { type: core[\"x\" /* Injectable */] },\n    ];\n    /** @nocollapse */\n    JsonpInterceptor.ctorParameters = function () { return [\n        { type: http_JsonpClientBackend, },\n    ]; };\n    return JsonpInterceptor;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Determine an appropriate URL for the response, by checking either\n * XMLHttpRequest.responseURL or the X-Request-URL header.\n * @param {?} xhr\n * @return {?}\n */\nfunction getResponseUrl(xhr) {\n    if ('responseURL' in xhr && xhr.responseURL) {\n        return xhr.responseURL;\n    }\n    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n        return xhr.getResponseHeader('X-Request-URL');\n    }\n    return null;\n}\n/**\n * A wrapper around the `XMLHttpRequest` constructor.\n *\n * \\@stable\n * @abstract\n */\nvar XhrFactory = (function () {\n    function XhrFactory() {\n    }\n    return XhrFactory;\n}());\n/**\n * A factory for \\@{link HttpXhrBackend} that uses the `XMLHttpRequest` browser API.\n *\n * \\@stable\n */\nvar http_BrowserXhr = (function () {\n    function BrowserXhr() {\n    }\n    /**\n     * @return {?}\n     */\n    BrowserXhr.prototype.build = /**\n     * @return {?}\n     */\n    function () { return /** @type {?} */ ((new XMLHttpRequest())); };\n    BrowserXhr.decorators = [\n        { type: core[\"x\" /* Injectable */] },\n    ];\n    /** @nocollapse */\n    BrowserXhr.ctorParameters = function () { return []; };\n    return BrowserXhr;\n}());\n/**\n * An `HttpBackend` which uses the XMLHttpRequest API to send\n * requests to a backend server.\n *\n * \\@stable\n */\nvar http_HttpXhrBackend = (function () {\n    function HttpXhrBackend(xhrFactory) {\n        this.xhrFactory = xhrFactory;\n    }\n    /**\n     * Process a request and return a stream of response events.\n     */\n    /**\n     * Process a request and return a stream of response events.\n     * @param {?} req\n     * @return {?}\n     */\n    HttpXhrBackend.prototype.handle = /**\n     * Process a request and return a stream of response events.\n     * @param {?} req\n     * @return {?}\n     */\n    function (req) {\n        var _this = this;\n        // Quick check to give a better error message when a user attempts to use\n        // HttpClient.jsonp() without installing the JsonpClientModule\n        if (req.method === 'JSONP') {\n            throw new Error(\"Attempted to construct Jsonp request without JsonpClientModule installed.\");\n        }\n        // Everything happens on Observable subscription.\n        return new Observable[\"Observable\"](function (observer) {\n            // Start by setting up the XHR object with request method, URL, and withCredentials flag.\n            var /** @type {?} */ xhr = _this.xhrFactory.build();\n            xhr.open(req.method, req.urlWithParams);\n            if (!!req.withCredentials) {\n                xhr.withCredentials = true;\n            }\n            // Add all the requested headers.\n            req.headers.forEach(function (name, values) { return xhr.setRequestHeader(name, values.join(',')); });\n            // Add an Accept header if one isn't present already.\n            if (!req.headers.has('Accept')) {\n                xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\n            }\n            // Auto-detect the Content-Type header if one isn't present already.\n            if (!req.headers.has('Content-Type')) {\n                var /** @type {?} */ detectedType = req.detectContentTypeHeader();\n                // Sometimes Content-Type detection fails.\n                if (detectedType !== null) {\n                    xhr.setRequestHeader('Content-Type', detectedType);\n                }\n            }\n            // Set the responseType if one was requested.\n            if (req.responseType) {\n                var /** @type {?} */ responseType = req.responseType.toLowerCase();\n                // JSON responses need to be processed as text. This is because if the server\n                // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\n                // xhr.response will be null, and xhr.responseText cannot be accessed to\n                // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\n                // is parsed by first requesting text and then applying JSON.parse.\n                xhr.responseType = /** @type {?} */ (((responseType !== 'json') ? responseType : 'text'));\n            }\n            // Serialize the request body if one is present. If not, this will be set to null.\n            var /** @type {?} */ reqBody = req.serializeBody();\n            // If progress events are enabled, response headers will be delivered\n            // in two events - the HttpHeaderResponse event and the full HttpResponse\n            // event. However, since response headers don't change in between these\n            // two events, it doesn't make sense to parse them twice. So headerResponse\n            // caches the data extracted from the response whenever it's first parsed,\n            // to ensure parsing isn't duplicated.\n            var /** @type {?} */ headerResponse = null;\n            // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\n            // state, and memoizes it into headerResponse.\n            var /** @type {?} */ partialFromXhr = function () {\n                if (headerResponse !== null) {\n                    return headerResponse;\n                }\n                // Read status and normalize an IE9 bug (http://bugs.jquery.com/ticket/1450).\n                var /** @type {?} */ status = xhr.status === 1223 ? 204 : xhr.status;\n                var /** @type {?} */ statusText = xhr.statusText || 'OK';\n                // Parse headers from XMLHttpRequest - this step is lazy.\n                var /** @type {?} */ headers = new HttpHeaders(xhr.getAllResponseHeaders());\n                // Read the response URL from the XMLHttpResponse instance and fall back on the\n                // request URL.\n                var /** @type {?} */ url = getResponseUrl(xhr) || req.url;\n                // Construct the HttpHeaderResponse and memoize it.\n                headerResponse = new http_HttpHeaderResponse({ headers: headers, status: status, statusText: statusText, url: url });\n                return headerResponse;\n            };\n            // Next, a few closures are defined for the various events which XMLHttpRequest can\n            // emit. This allows them to be unregistered as event listeners later.\n            // First up is the load event, which represents a response being fully available.\n            var /** @type {?} */ onLoad = function () {\n                // Read response state from the memoized partial data.\n                var _a = partialFromXhr(), headers = _a.headers, status = _a.status, statusText = _a.statusText, url = _a.url;\n                // The body will be read out if present.\n                var /** @type {?} */ body = null;\n                if (status !== 204) {\n                    // Use XMLHttpRequest.response if set, responseText otherwise.\n                    body = (typeof xhr.response === 'undefined') ? xhr.responseText : xhr.response;\n                }\n                // Normalize another potential bug (this one comes from CORS).\n                if (status === 0) {\n                    status = !!body ? 200 : 0;\n                }\n                // ok determines whether the response will be transmitted on the event or\n                // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n                // but a successful status code can still result in an error if the user\n                // asked for JSON data and the body cannot be parsed as such.\n                var /** @type {?} */ ok = status >= 200 && status < 300;\n                // Check whether the body needs to be parsed as JSON (in many cases the browser\n                // will have done that already).\n                if (ok && req.responseType === 'json' && typeof body === 'string') {\n                    // Attempt the parse. If it fails, a parse error should be delivered to the user.\n                    body = body.replace(XSSI_PREFIX, '');\n                    try {\n                        body = JSON.parse(body);\n                    }\n                    catch (/** @type {?} */ error) {\n                        // Even though the response status was 2xx, this is still an error.\n                        ok = false;\n                        // The parse error contains the text of the body that failed to parse.\n                        body = /** @type {?} */ ({ error: error, text: body });\n                    }\n                }\n                else if (!ok && req.responseType === 'json' && typeof body === 'string') {\n                    try {\n                        // Attempt to parse the body as JSON.\n                        body = JSON.parse(body);\n                    }\n                    catch (/** @type {?} */ error) {\n                        // Cannot be certain that the body was meant to be parsed as JSON.\n                        // Leave the body as a string.\n                    }\n                }\n                if (ok) {\n                    // A successful response is delivered on the event stream.\n                    observer.next(new http_HttpResponse({\n                        body: body,\n                        headers: headers,\n                        status: status,\n                        statusText: statusText,\n                        url: url || undefined,\n                    }));\n                    // The full body has been received and delivered, no further events\n                    // are possible. This request is complete.\n                    observer.complete();\n                }\n                else {\n                    // An unsuccessful request is delivered on the error channel.\n                    observer.error(new http_HttpErrorResponse({\n                        // The error in this case is the response body (error from the server).\n                        error: body,\n                        headers: headers,\n                        status: status,\n                        statusText: statusText,\n                        url: url || undefined,\n                    }));\n                }\n            };\n            // The onError callback is called when something goes wrong at the network level.\n            // Connection timeout, DNS error, offline, etc. These are actual errors, and are\n            // transmitted on the error channel.\n            var /** @type {?} */ onError = function (error) {\n                var /** @type {?} */ res = new http_HttpErrorResponse({\n                    error: error,\n                    status: xhr.status || 0,\n                    statusText: xhr.statusText || 'Unknown Error',\n                });\n                observer.error(res);\n            };\n            // The sentHeaders flag tracks whether the HttpResponseHeaders event\n            // has been sent on the stream. This is necessary to track if progress\n            // is enabled since the event will be sent on only the first download\n            // progerss event.\n            var /** @type {?} */ sentHeaders = false;\n            // The download progress event handler, which is only registered if\n            // progress events are enabled.\n            var /** @type {?} */ onDownProgress = function (event) {\n                // Send the HttpResponseHeaders event if it hasn't been sent already.\n                if (!sentHeaders) {\n                    observer.next(partialFromXhr());\n                    sentHeaders = true;\n                }\n                // Start building the download progress event to deliver on the response\n                // event stream.\n                var /** @type {?} */ progressEvent = {\n                    type: HttpEventType.DownloadProgress,\n                    loaded: event.loaded,\n                };\n                // Set the total number of bytes in the event if it's available.\n                if (event.lengthComputable) {\n                    progressEvent.total = event.total;\n                }\n                // If the request was for text content and a partial response is\n                // available on XMLHttpRequest, include it in the progress event\n                // to allow for streaming reads.\n                if (req.responseType === 'text' && !!xhr.responseText) {\n                    progressEvent.partialText = xhr.responseText;\n                }\n                // Finally, fire the event.\n                observer.next(progressEvent);\n            };\n            // The upload progress event handler, which is only registered if\n            // progress events are enabled.\n            var /** @type {?} */ onUpProgress = function (event) {\n                // Upload progress events are simpler. Begin building the progress\n                // event.\n                var /** @type {?} */ progress = {\n                    type: HttpEventType.UploadProgress,\n                    loaded: event.loaded,\n                };\n                // If the total number of bytes being uploaded is available, include\n                // it.\n                if (event.lengthComputable) {\n                    progress.total = event.total;\n                }\n                // Send the event.\n                observer.next(progress);\n            };\n            // By default, register for load and error events.\n            xhr.addEventListener('load', onLoad);\n            xhr.addEventListener('error', onError);\n            // Progress events are only enabled if requested.\n            if (req.reportProgress) {\n                // Download progress is always enabled if requested.\n                xhr.addEventListener('progress', onDownProgress);\n                // Upload progress depends on whether there is a body to upload.\n                if (reqBody !== null && xhr.upload) {\n                    xhr.upload.addEventListener('progress', onUpProgress);\n                }\n            }\n            // Fire the request, and notify the event stream that it was fired.\n            xhr.send(reqBody);\n            observer.next({ type: HttpEventType.Sent });\n            // This is the return from the Observable function, which is the\n            // request cancellation handler.\n            return function () {\n                // On a cancellation, remove all registered event listeners.\n                xhr.removeEventListener('error', onError);\n                xhr.removeEventListener('load', onLoad);\n                if (req.reportProgress) {\n                    xhr.removeEventListener('progress', onDownProgress);\n                    if (reqBody !== null && xhr.upload) {\n                        xhr.upload.removeEventListener('progress', onUpProgress);\n                    }\n                }\n                // Finally, abort the in-flight request.\n                xhr.abort();\n            };\n        });\n    };\n    HttpXhrBackend.decorators = [\n        { type: core[\"x\" /* Injectable */] },\n    ];\n    /** @nocollapse */\n    HttpXhrBackend.ctorParameters = function () { return [\n        { type: XhrFactory, },\n    ]; };\n    return HttpXhrBackend;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar XSRF_COOKIE_NAME = new core[\"y\" /* InjectionToken */]('XSRF_COOKIE_NAME');\nvar XSRF_HEADER_NAME = new core[\"y\" /* InjectionToken */]('XSRF_HEADER_NAME');\n/**\n * Retrieves the current XSRF token to use with the next outgoing request.\n *\n * \\@stable\n * @abstract\n */\nvar HttpXsrfTokenExtractor = (function () {\n    function HttpXsrfTokenExtractor() {\n    }\n    return HttpXsrfTokenExtractor;\n}());\n/**\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\n */\nvar http_HttpXsrfCookieExtractor = (function () {\n    function HttpXsrfCookieExtractor(doc, platform, cookieName) {\n        this.doc = doc;\n        this.platform = platform;\n        this.cookieName = cookieName;\n        this.lastCookieString = '';\n        this.lastToken = null;\n        /**\n         * \\@internal for testing\n         */\n        this.parseCount = 0;\n    }\n    /**\n     * @return {?}\n     */\n    HttpXsrfCookieExtractor.prototype.getToken = /**\n     * @return {?}\n     */\n    function () {\n        if (this.platform === 'server') {\n            return null;\n        }\n        var /** @type {?} */ cookieString = this.doc.cookie || '';\n        if (cookieString !== this.lastCookieString) {\n            this.parseCount++;\n            this.lastToken = Object(common[\"z\" /* ɵparseCookieValue */])(cookieString, this.cookieName);\n            this.lastCookieString = cookieString;\n        }\n        return this.lastToken;\n    };\n    HttpXsrfCookieExtractor.decorators = [\n        { type: core[\"x\" /* Injectable */] },\n    ];\n    /** @nocollapse */\n    HttpXsrfCookieExtractor.ctorParameters = function () { return [\n        { type: undefined, decorators: [{ type: core[\"w\" /* Inject */], args: [common[\"d\" /* DOCUMENT */],] },] },\n        { type: undefined, decorators: [{ type: core[\"w\" /* Inject */], args: [core[\"M\" /* PLATFORM_ID */],] },] },\n        { type: undefined, decorators: [{ type: core[\"w\" /* Inject */], args: [XSRF_COOKIE_NAME,] },] },\n    ]; };\n    return HttpXsrfCookieExtractor;\n}());\n/**\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\n */\nvar http_HttpXsrfInterceptor = (function () {\n    function HttpXsrfInterceptor(tokenService, headerName) {\n        this.tokenService = tokenService;\n        this.headerName = headerName;\n    }\n    /**\n     * @param {?} req\n     * @param {?} next\n     * @return {?}\n     */\n    HttpXsrfInterceptor.prototype.intercept = /**\n     * @param {?} req\n     * @param {?} next\n     * @return {?}\n     */\n    function (req, next) {\n        var /** @type {?} */ lcUrl = req.url.toLowerCase();\n        // Skip both non-mutating requests and absolute URLs.\n        // Non-mutating requests don't require a token, and absolute URLs require special handling\n        // anyway as the cookie set\n        // on our origin is not the same as the token expected by another origin.\n        if (req.method === 'GET' || req.method === 'HEAD' || lcUrl.startsWith('http://') ||\n            lcUrl.startsWith('https://')) {\n            return next.handle(req);\n        }\n        var /** @type {?} */ token = this.tokenService.getToken();\n        // Be careful not to overwrite an existing header of the same name.\n        if (token !== null && !req.headers.has(this.headerName)) {\n            req = req.clone({ headers: req.headers.set(this.headerName, token) });\n        }\n        return next.handle(req);\n    };\n    HttpXsrfInterceptor.decorators = [\n        { type: core[\"x\" /* Injectable */] },\n    ];\n    /** @nocollapse */\n    HttpXsrfInterceptor.ctorParameters = function () { return [\n        { type: HttpXsrfTokenExtractor, },\n        { type: undefined, decorators: [{ type: core[\"w\" /* Inject */], args: [XSRF_HEADER_NAME,] },] },\n    ]; };\n    return HttpXsrfInterceptor;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Constructs an `HttpHandler` that applies a bunch of `HttpInterceptor`s\n * to a request before passing it to the given `HttpBackend`.\n *\n * Meant to be used as a factory function within `HttpClientModule`.\n *\n * \\@stable\n * @param {?} backend\n * @param {?=} interceptors\n * @return {?}\n */\nfunction interceptingHandler(backend, interceptors) {\n    if (interceptors === void 0) { interceptors = []; }\n    if (!interceptors) {\n        return backend;\n    }\n    return interceptors.reduceRight(function (next, interceptor) { return new HttpInterceptorHandler(next, interceptor); }, backend);\n}\n/**\n * Factory function that determines where to store JSONP callbacks.\n *\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\n *\n * \\@stable\n * @return {?}\n */\nfunction jsonpCallbackContext() {\n    if (typeof window === 'object') {\n        return window;\n    }\n    return {};\n}\n/**\n * `NgModule` which adds XSRF protection support to outgoing requests.\n *\n * Provided the server supports a cookie-based XSRF protection system, this\n * module can be used directly to configure XSRF protection with the correct\n * cookie and header names.\n *\n * If no such names are provided, the default is to use `X-XSRF-TOKEN` for\n * the header name and `XSRF-TOKEN` for the cookie name.\n *\n * \\@stable\n */\nvar http_HttpClientXsrfModule = (function () {\n    function HttpClientXsrfModule() {\n    }\n    /**\n     * Disable the default XSRF protection.\n     */\n    /**\n     * Disable the default XSRF protection.\n     * @return {?}\n     */\n    HttpClientXsrfModule.disable = /**\n     * Disable the default XSRF protection.\n     * @return {?}\n     */\n    function () {\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: [\n                { provide: http_HttpXsrfInterceptor, useClass: http_NoopInterceptor },\n            ],\n        };\n    };\n    /**\n     * Configure XSRF protection to use the given cookie name or header name,\n     * or the default names (as described above) if not provided.\n     */\n    /**\n     * Configure XSRF protection to use the given cookie name or header name,\n     * or the default names (as described above) if not provided.\n     * @param {?=} options\n     * @return {?}\n     */\n    HttpClientXsrfModule.withOptions = /**\n     * Configure XSRF protection to use the given cookie name or header name,\n     * or the default names (as described above) if not provided.\n     * @param {?=} options\n     * @return {?}\n     */\n    function (options) {\n        if (options === void 0) { options = {}; }\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: [\n                options.cookieName ? { provide: XSRF_COOKIE_NAME, useValue: options.cookieName } : [],\n                options.headerName ? { provide: XSRF_HEADER_NAME, useValue: options.headerName } : [],\n            ],\n        };\n    };\n    HttpClientXsrfModule.decorators = [\n        { type: core[\"E\" /* NgModule */], args: [{\n                    providers: [\n                        http_HttpXsrfInterceptor,\n                        { provide: HTTP_INTERCEPTORS, useExisting: http_HttpXsrfInterceptor, multi: true },\n                        { provide: HttpXsrfTokenExtractor, useClass: http_HttpXsrfCookieExtractor },\n                        { provide: XSRF_COOKIE_NAME, useValue: 'XSRF-TOKEN' },\n                        { provide: XSRF_HEADER_NAME, useValue: 'X-XSRF-TOKEN' },\n                    ],\n                },] },\n    ];\n    /** @nocollapse */\n    HttpClientXsrfModule.ctorParameters = function () { return []; };\n    return HttpClientXsrfModule;\n}());\n/**\n * `NgModule` which provides the `HttpClient` and associated services.\n *\n * Interceptors can be added to the chain behind `HttpClient` by binding them\n * to the multiprovider for `HTTP_INTERCEPTORS`.\n *\n * \\@stable\n */\nvar http_HttpClientModule = (function () {\n    function HttpClientModule() {\n    }\n    HttpClientModule.decorators = [\n        { type: core[\"E\" /* NgModule */], args: [{\n                    imports: [\n                        http_HttpClientXsrfModule.withOptions({\n                            cookieName: 'XSRF-TOKEN',\n                            headerName: 'X-XSRF-TOKEN',\n                        }),\n                    ],\n                    providers: [\n                        http_HttpClient,\n                        // HttpHandler is the backend + interceptors and is constructed\n                        // using the interceptingHandler factory function.\n                        {\n                            provide: HttpHandler,\n                            useFactory: interceptingHandler,\n                            deps: [HttpBackend, [new core[\"K\" /* Optional */](), new core[\"w\" /* Inject */](HTTP_INTERCEPTORS)]],\n                        },\n                        http_HttpXhrBackend,\n                        { provide: HttpBackend, useExisting: http_HttpXhrBackend },\n                        http_BrowserXhr,\n                        { provide: XhrFactory, useExisting: http_BrowserXhr },\n                    ],\n                },] },\n    ];\n    /** @nocollapse */\n    HttpClientModule.ctorParameters = function () { return []; };\n    return HttpClientModule;\n}());\n/**\n * `NgModule` which enables JSONP support in `HttpClient`.\n *\n * Without this module, Jsonp requests will reach the backend\n * with method JSONP, where they'll be rejected.\n *\n * \\@stable\n */\nvar http_HttpClientJsonpModule = (function () {\n    function HttpClientJsonpModule() {\n    }\n    HttpClientJsonpModule.decorators = [\n        { type: core[\"E\" /* NgModule */], args: [{\n                    providers: [\n                        http_JsonpClientBackend,\n                        { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },\n                        { provide: HTTP_INTERCEPTORS, useClass: http_JsonpInterceptor, multi: true },\n                    ],\n                },] },\n    ];\n    /** @nocollapse */\n    HttpClientJsonpModule.ctorParameters = function () { return []; };\n    return HttpClientJsonpModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Generated bundle index. Do not edit.\n */\n\n\n//# sourceMappingURL=http.js.map\n\n// EXTERNAL MODULE: ./node_modules/rxjs/operators/map.js\nvar operators_map = __webpack_require__(173);\nvar operators_map_default = /*#__PURE__*/__webpack_require__.n(operators_map);\n\n// EXTERNAL MODULE: ./node_modules/date-fns/index.js\nvar date_fns = __webpack_require__(170);\nvar date_fns_default = /*#__PURE__*/__webpack_require__.n(date_fns);\n\n// EXTERNAL MODULE: ./demos/demo-modules/demo-utils/colors.ts\nvar colors = __webpack_require__(708);\n\n// CONCATENATED MODULE: ./demos/demo-modules/async-events/component.ts\n\n\n\n\nvar component_DemoComponent = (function () {\n    function DemoComponent(http) {\n        this.http = http;\n        this.view = 'month';\n        this.viewDate = new Date();\n        this.activeDayIsOpen = false;\n    }\n    DemoComponent.prototype.ngOnInit = function () {\n        this.fetchEvents();\n    };\n    DemoComponent.prototype.fetchEvents = function () {\n        var getStart = {\n            month: date_fns[\"startOfMonth\"],\n            week: date_fns[\"startOfWeek\"],\n            day: date_fns[\"startOfDay\"]\n        }[this.view];\n        var getEnd = {\n            month: date_fns[\"endOfMonth\"],\n            week: date_fns[\"endOfWeek\"],\n            day: date_fns[\"endOfDay\"]\n        }[this.view];\n        var params = new HttpParams()\n            .set('primary_release_date.gte', Object(date_fns[\"format\"])(getStart(this.viewDate), 'YYYY-MM-DD'))\n            .set('primary_release_date.lte', Object(date_fns[\"format\"])(getEnd(this.viewDate), 'YYYY-MM-DD'))\n            .set('api_key', '0ec33936a68018857d727958dca1424f');\n        this.events$ = this.http\n            .get('https://api.themoviedb.org/3/discover/movie', { params: params })\n            .pipe(Object(operators_map[\"map\"])(function (_a) {\n            var results = _a.results;\n            return results.map(function (film) {\n                return {\n                    title: film.title,\n                    start: new Date(film.release_date),\n                    color: colors[\"a\" /* colors */].yellow,\n                    meta: {\n                        film: film\n                    }\n                };\n            });\n        }));\n    };\n    DemoComponent.prototype.dayClicked = function (_a) {\n        var date = _a.date, events = _a.events;\n        if (Object(date_fns[\"isSameMonth\"])(date, this.viewDate)) {\n            if ((Object(date_fns[\"isSameDay\"])(this.viewDate, date) && this.activeDayIsOpen === true) ||\n                events.length === 0) {\n                this.activeDayIsOpen = false;\n            }\n            else {\n                this.activeDayIsOpen = true;\n                this.viewDate = date;\n            }\n        }\n    };\n    DemoComponent.prototype.eventClicked = function (event) {\n        window.open(\"https://www.themoviedb.org/movie/\" + event.meta.film.id, '_blank');\n    };\n    return DemoComponent;\n}());\n\n\n// CONCATENATED MODULE: ./demos/demo-modules/async-events/component.ngfactory.js\n/**\n* @fileoverview This file is generated by the Angular template compiler.\n* Do not edit.\n* @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}\n* tslint:disable\n*/ \n\n\n\n\n\n\n\n\n\n\n\n\n\nvar styles_DemoComponent = [];\nvar RenderType_DemoComponent = core[\"_21\" /* ɵcrt */]({ encapsulation: 2, styles: styles_DemoComponent, data: {} });\n\nfunction View_DemoComponent_1(_l) { return core[\"_47\" /* ɵvid */](0, [(_l()(), core[\"_45\" /* ɵted */](-1, null, [\"\\n  \"])), (_l()(), core[\"_23\" /* ɵeld */](1, 0, null, null, 5, \"div\", [[\"class\", \"text-center\"]], null, null, null, null, null)), (_l()(), core[\"_45\" /* ɵted */](-1, null, [\"\\n    \"])), (_l()(), core[\"_23\" /* ɵeld */](3, 0, null, null, 0, \"i\", [[\"class\", \"fa fa-spin fa-spinner fa-5x\"]], null, null, null, null, null)), (_l()(), core[\"_45\" /* ɵted */](-1, null, [\"\\n    \"])), (_l()(), core[\"_23\" /* ɵeld */](5, 0, null, null, 0, \"br\", [], null, null, null, null, null)), (_l()(), core[\"_45\" /* ɵted */](-1, null, [\"\\n    Loading events...\\n  \"])), (_l()(), core[\"_45\" /* ɵted */](-1, null, [\"\\n\"]))], null, null); }\nfunction View_DemoComponent_3(_l) { return core[\"_47\" /* ɵvid */](0, [(_l()(), core[\"_23\" /* ɵeld */](0, 0, null, null, 2, \"mwl-calendar-month-view\", [], null, [[null, \"dayClicked\"], [null, \"eventClicked\"]], function (_v, en, $event) { var ad = true; var _co = _v.component; if ((\"dayClicked\" === en)) {\n        var pd_0 = (_co.dayClicked($event.day) !== false);\n        ad = (pd_0 && ad);\n    } if ((\"eventClicked\" === en)) {\n        var pd_1 = (_co.eventClicked($event.event) !== false);\n        ad = (pd_1 && ad);\n    } return ad; }, calendar_month_view_component_ngfactory[\"b\" /* View_CalendarMonthViewComponent_0 */], calendar_month_view_component_ngfactory[\"a\" /* RenderType_CalendarMonthViewComponent */])), core[\"_22\" /* ɵdid */](1, 770048, null, 0, calendar_month_view_component[\"a\" /* CalendarMonthViewComponent */], [core[\"j\" /* ChangeDetectorRef */], calendar_utils_provider[\"a\" /* CalendarUtils */], core[\"D\" /* LOCALE_ID */]], { viewDate: [0, \"viewDate\"], events: [1, \"events\"], activeDayIsOpen: [2, \"activeDayIsOpen\"] }, { dayClicked: \"dayClicked\", eventClicked: \"eventClicked\" }), (_l()(), core[\"_45\" /* ɵted */](-1, null, [\"\\n    \"]))], function (_ck, _v) { var _co = _v.component; var currVal_0 = _co.viewDate; var currVal_1 = _v.parent.context.$implicit; var currVal_2 = _co.activeDayIsOpen; _ck(_v, 1, 0, currVal_0, currVal_1, currVal_2); }, null); }\nfunction View_DemoComponent_4(_l) { return core[\"_47\" /* ɵvid */](0, [(_l()(), core[\"_23\" /* ɵeld */](0, 0, null, null, 2, \"mwl-calendar-week-view\", [], null, [[null, \"eventClicked\"]], function (_v, en, $event) { var ad = true; var _co = _v.component; if ((\"eventClicked\" === en)) {\n        var pd_0 = (_co.eventClicked($event.event) !== false);\n        ad = (pd_0 && ad);\n    } return ad; }, calendar_week_view_component_ngfactory[\"b\" /* View_CalendarWeekViewComponent_0 */], calendar_week_view_component_ngfactory[\"a\" /* RenderType_CalendarWeekViewComponent */])), core[\"_22\" /* ɵdid */](1, 770048, null, 0, calendar_week_view_component[\"a\" /* CalendarWeekViewComponent */], [core[\"j\" /* ChangeDetectorRef */], calendar_utils_provider[\"a\" /* CalendarUtils */], core[\"D\" /* LOCALE_ID */]], { viewDate: [0, \"viewDate\"], events: [1, \"events\"] }, { eventClicked: \"eventClicked\" }), (_l()(), core[\"_45\" /* ɵted */](-1, null, [\"\\n    \"]))], function (_ck, _v) { var _co = _v.component; var currVal_0 = _co.viewDate; var currVal_1 = _v.parent.context.$implicit; _ck(_v, 1, 0, currVal_0, currVal_1); }, null); }\nfunction View_DemoComponent_5(_l) { return core[\"_47\" /* ɵvid */](0, [(_l()(), core[\"_23\" /* ɵeld */](0, 0, null, null, 2, \"mwl-calendar-day-view\", [], null, [[null, \"eventClicked\"]], function (_v, en, $event) { var ad = true; var _co = _v.component; if ((\"eventClicked\" === en)) {\n        var pd_0 = (_co.eventClicked($event.event) !== false);\n        ad = (pd_0 && ad);\n    } return ad; }, calendar_day_view_component_ngfactory[\"b\" /* View_CalendarDayViewComponent_0 */], calendar_day_view_component_ngfactory[\"a\" /* RenderType_CalendarDayViewComponent */])), core[\"_22\" /* ɵdid */](1, 770048, null, 0, calendar_day_view_component[\"a\" /* CalendarDayViewComponent */], [core[\"j\" /* ChangeDetectorRef */], calendar_utils_provider[\"a\" /* CalendarUtils */], core[\"D\" /* LOCALE_ID */]], { viewDate: [0, \"viewDate\"], events: [1, \"events\"] }, { eventClicked: \"eventClicked\" }), (_l()(), core[\"_45\" /* ɵted */](-1, null, [\"\\n    \"]))], function (_ck, _v) { var _co = _v.component; var currVal_0 = _co.viewDate; var currVal_1 = _v.parent.context.$implicit; _ck(_v, 1, 0, currVal_0, currVal_1); }, null); }\nfunction View_DemoComponent_2(_l) { return core[\"_47\" /* ɵvid */](0, [(_l()(), core[\"_23\" /* ɵeld */](0, 0, null, null, 14, \"div\", [], null, null, null, null, null)), (_l()(), core[\"_45\" /* ɵted */](-1, null, [\"\\n  \"])), (_l()(), core[\"_23\" /* ɵeld */](2, 0, null, null, 11, \"div\", [], null, null, null, null, null)), core[\"_22\" /* ɵdid */](3, 16384, null, 0, common[\"p\" /* NgSwitch */], [], { ngSwitch: [0, \"ngSwitch\"] }, null), (_l()(), core[\"_45\" /* ɵted */](-1, null, [\"\\n    \"])), (_l()(), core[\"_18\" /* ɵand */](16777216, null, null, 1, null, View_DemoComponent_3)), core[\"_22\" /* ɵdid */](6, 278528, null, 0, common[\"q\" /* NgSwitchCase */], [core[\"_6\" /* ViewContainerRef */], core[\"_1\" /* TemplateRef */], common[\"p\" /* NgSwitch */]], { ngSwitchCase: [0, \"ngSwitchCase\"] }, null), (_l()(), core[\"_45\" /* ɵted */](-1, null, [\"\\n    \"])), (_l()(), core[\"_18\" /* ɵand */](16777216, null, null, 1, null, View_DemoComponent_4)), core[\"_22\" /* ɵdid */](9, 278528, null, 0, common[\"q\" /* NgSwitchCase */], [core[\"_6\" /* ViewContainerRef */], core[\"_1\" /* TemplateRef */], common[\"p\" /* NgSwitch */]], { ngSwitchCase: [0, \"ngSwitchCase\"] }, null), (_l()(), core[\"_45\" /* ɵted */](-1, null, [\"\\n    \"])), (_l()(), core[\"_18\" /* ɵand */](16777216, null, null, 1, null, View_DemoComponent_5)), core[\"_22\" /* ɵdid */](12, 278528, null, 0, common[\"q\" /* NgSwitchCase */], [core[\"_6\" /* ViewContainerRef */], core[\"_1\" /* TemplateRef */], common[\"p\" /* NgSwitch */]], { ngSwitchCase: [0, \"ngSwitchCase\"] }, null), (_l()(), core[\"_45\" /* ɵted */](-1, null, [\"\\n  \"])), (_l()(), core[\"_45\" /* ɵted */](-1, null, [\"\\n\"]))], function (_ck, _v) { var _co = _v.component; var currVal_0 = _co.view; _ck(_v, 3, 0, currVal_0); var currVal_1 = \"month\"; _ck(_v, 6, 0, currVal_1); var currVal_2 = \"week\"; _ck(_v, 9, 0, currVal_2); var currVal_3 = \"day\"; _ck(_v, 12, 0, currVal_3); }, null); }\nfunction View_DemoComponent_0(_l) { return core[\"_47\" /* ɵvid */](2, [(_l()(), core[\"_23\" /* ɵeld */](0, 0, null, null, 2, \"mwl-demo-utils-calendar-header\", [], null, [[null, \"viewChange\"], [null, \"viewDateChange\"]], function (_v, en, $event) { var ad = true; var _co = _v.component; if ((\"viewChange\" === en)) {\n        var pd_0 = ((_co.view = $event) !== false);\n        ad = (pd_0 && ad);\n    } if ((\"viewDateChange\" === en)) {\n        var pd_1 = ((_co.viewDate = $event) !== false);\n        ad = (pd_1 && ad);\n    } if ((\"viewDateChange\" === en)) {\n        var pd_2 = (_co.fetchEvents() !== false);\n        ad = (pd_2 && ad);\n    } if ((\"viewChange\" === en)) {\n        var pd_3 = (_co.fetchEvents() !== false);\n        ad = (pd_3 && ad);\n    } return ad; }, calendar_header_component_ngfactory[\"b\" /* View_CalendarHeaderComponent_0 */], calendar_header_component_ngfactory[\"a\" /* RenderType_CalendarHeaderComponent */])), core[\"_22\" /* ɵdid */](1, 49152, null, 0, calendar_header_component[\"a\" /* CalendarHeaderComponent */], [], { view: [0, \"view\"], viewDate: [1, \"viewDate\"] }, { viewChange: \"viewChange\", viewDateChange: \"viewDateChange\" }), (_l()(), core[\"_45\" /* ɵted */](-1, null, [\"\\n\"])), (_l()(), core[\"_45\" /* ɵted */](-1, null, [\"\\n\\n\"])), (_l()(), core[\"_18\" /* ɵand */](0, [[\"loading\", 2]], null, 0, null, View_DemoComponent_1)), (_l()(), core[\"_45\" /* ɵted */](-1, null, [\"\\n\\n\"])), (_l()(), core[\"_18\" /* ɵand */](16777216, null, null, 2, null, View_DemoComponent_2)), core[\"_22\" /* ɵdid */](7, 16384, null, 0, common[\"m\" /* NgIf */], [core[\"_6\" /* ViewContainerRef */], core[\"_1\" /* TemplateRef */]], { ngIf: [0, \"ngIf\"], ngIfElse: [1, \"ngIfElse\"] }, null), core[\"_39\" /* ɵpid */](131072, common[\"b\" /* AsyncPipe */], [core[\"j\" /* ChangeDetectorRef */]])], function (_ck, _v) { var _co = _v.component; var currVal_0 = _co.view; var currVal_1 = _co.viewDate; _ck(_v, 1, 0, currVal_0, currVal_1); var currVal_2 = core[\"_46\" /* ɵunv */](_v, 7, 0, core[\"_37\" /* ɵnov */](_v, 8).transform(_co.events$)); var currVal_3 = core[\"_37\" /* ɵnov */](_v, 4); _ck(_v, 7, 0, currVal_2, currVal_3); }, null); }\nfunction View_DemoComponent_Host_0(_l) { return core[\"_47\" /* ɵvid */](0, [(_l()(), core[\"_23\" /* ɵeld */](0, 0, null, null, 1, \"mwl-demo-component\", [], null, null, null, View_DemoComponent_0, RenderType_DemoComponent)), core[\"_22\" /* ɵdid */](1, 114688, null, 0, component_DemoComponent, [http_HttpClient], null, null)], function (_ck, _v) { _ck(_v, 1, 0); }, null); }\nvar DemoComponentNgFactory = core[\"_19\" /* ɵccf */](\"mwl-demo-component\", component_DemoComponent, View_DemoComponent_Host_0, {}, {}, []);\n\n//# sourceMappingURL=component.ngfactory.js.map\n// EXTERNAL MODULE: ./node_modules/@angular/forms/esm5/forms.js\nvar esm5_forms = __webpack_require__(20);\n\n// EXTERNAL MODULE: ./node_modules/@ng-bootstrap/ng-bootstrap/datepicker/ngb-calendar.js\nvar ngb_calendar = __webpack_require__(14);\n\n// EXTERNAL MODULE: ./node_modules/@ng-bootstrap/ng-bootstrap/datepicker/datepicker-i18n.js\nvar datepicker_i18n = __webpack_require__(21);\n\n// EXTERNAL MODULE: ./node_modules/@ng-bootstrap/ng-bootstrap/datepicker/ngb-date-parser-formatter.js\nvar ngb_date_parser_formatter = __webpack_require__(57);\n\n// EXTERNAL MODULE: ./node_modules/@ng-bootstrap/ng-bootstrap/datepicker/datepicker-config.js\nvar datepicker_config = __webpack_require__(56);\n\n// EXTERNAL MODULE: ./node_modules/@ng-bootstrap/ng-bootstrap/timepicker/timepicker-config.js\nvar timepicker_config = __webpack_require__(50);\n\n// EXTERNAL MODULE: ./node_modules/angular-draggable-droppable/dist/esm/src/draggable-helper.provider.js\nvar draggable_helper_provider = __webpack_require__(19);\n\n// EXTERNAL MODULE: ./src/modules/common/calendar-event-title-formatter.provider.ts\nvar calendar_event_title_formatter_provider = __webpack_require__(43);\n\n// EXTERNAL MODULE: ./src/modules/common/calendar-date-formatter.provider.ts\nvar calendar_date_formatter_provider = __webpack_require__(32);\n\n// EXTERNAL MODULE: ./src/modules/common/calendar-common.module.ts + 2 modules\nvar calendar_common_module = __webpack_require__(113);\n\n// EXTERNAL MODULE: ./node_modules/angular-draggable-droppable/dist/esm/src/drag-and-drop.module.js\nvar drag_and_drop_module = __webpack_require__(166);\n\n// EXTERNAL MODULE: ./src/modules/month/calendar-month.module.ts\nvar calendar_month_module = __webpack_require__(167);\n\n// EXTERNAL MODULE: ./node_modules/angular-resizable-element/dist/esm/src/resizable.module.js\nvar resizable_module = __webpack_require__(288);\n\n// EXTERNAL MODULE: ./src/modules/week/calendar-week.module.ts\nvar calendar_week_module = __webpack_require__(168);\n\n// EXTERNAL MODULE: ./src/modules/day/calendar-day.module.ts\nvar calendar_day_module = __webpack_require__(169);\n\n// EXTERNAL MODULE: ./src/modules/calendar.module.ts\nvar calendar_module = __webpack_require__(285);\n\n// EXTERNAL MODULE: ./node_modules/@ng-bootstrap/ng-bootstrap/datepicker/datepicker.module.js + 2 modules\nvar datepicker_module = __webpack_require__(289);\n\n// EXTERNAL MODULE: ./node_modules/@ng-bootstrap/ng-bootstrap/timepicker/timepicker.module.js\nvar timepicker_module = __webpack_require__(290);\n\n// EXTERNAL MODULE: ./demos/demo-modules/demo-utils/module.ts\nvar demo_utils_module = __webpack_require__(291);\n\n// EXTERNAL MODULE: ./node_modules/@angular/router/esm5/router.js\nvar router = __webpack_require__(114);\n\n// CONCATENATED MODULE: ./demos/demo-modules/async-events/module.ngfactory.js\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DemoModuleNgFactory\", function() { return DemoModuleNgFactory; });\n/**\n* @fileoverview This file is generated by the Angular template compiler.\n* Do not edit.\n* @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}\n* tslint:disable\n*/ \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar DemoModuleNgFactory = core[\"_20\" /* ɵcmf */](DemoModule, [], function (_l) { return core[\"_34\" /* ɵmod */]([core[\"_35\" /* ɵmpd */](512, core[\"m\" /* ComponentFactoryResolver */], core[\"_16\" /* ɵCodegenComponentFactoryResolver */], [[8, [calendar_tooltip_directive_ngfactory[\"a\" /* CalendarTooltipWindowComponentNgFactory */], datepicker_ngfactory[\"a\" /* NgbDatepickerNgFactory */], DemoComponentNgFactory]], [3, core[\"m\" /* ComponentFactoryResolver */]], core[\"H\" /* NgModuleRef */]]), core[\"_35\" /* ɵmpd */](4608, common[\"o\" /* NgLocalization */], common[\"n\" /* NgLocaleLocalization */], [core[\"D\" /* LOCALE_ID */], [2, common[\"y\" /* ɵa */]]]), core[\"_35\" /* ɵmpd */](4608, HttpXsrfTokenExtractor, http_HttpXsrfCookieExtractor, [common[\"d\" /* DOCUMENT */], core[\"M\" /* PLATFORM_ID */], XSRF_COOKIE_NAME]), core[\"_35\" /* ɵmpd */](4608, http_HttpXsrfInterceptor, http_HttpXsrfInterceptor, [HttpXsrfTokenExtractor, XSRF_HEADER_NAME]), core[\"_35\" /* ɵmpd */](5120, HTTP_INTERCEPTORS, function (p0_0) { return [p0_0]; }, [http_HttpXsrfInterceptor]), core[\"_35\" /* ɵmpd */](4608, http_BrowserXhr, http_BrowserXhr, []), core[\"_35\" /* ɵmpd */](6144, XhrFactory, null, [http_BrowserXhr]), core[\"_35\" /* ɵmpd */](4608, http_HttpXhrBackend, http_HttpXhrBackend, [XhrFactory]), core[\"_35\" /* ɵmpd */](6144, HttpBackend, null, [http_HttpXhrBackend]), core[\"_35\" /* ɵmpd */](5120, HttpHandler, interceptingHandler, [HttpBackend, [2, HTTP_INTERCEPTORS]]), core[\"_35\" /* ɵmpd */](4608, http_HttpClient, http_HttpClient, [HttpHandler]), core[\"_35\" /* ɵmpd */](4608, esm5_forms[\"o\" /* ɵi */], esm5_forms[\"o\" /* ɵi */], []), core[\"_35\" /* ɵmpd */](4608, ngb_calendar[\"a\" /* NgbCalendar */], ngb_calendar[\"b\" /* NgbCalendarGregorian */], []), core[\"_35\" /* ɵmpd */](4608, datepicker_i18n[\"a\" /* NgbDatepickerI18n */], datepicker_i18n[\"b\" /* NgbDatepickerI18nDefault */], []), core[\"_35\" /* ɵmpd */](4608, ngb_date_parser_formatter[\"b\" /* NgbDateParserFormatter */], ngb_date_parser_formatter[\"a\" /* NgbDateISOParserFormatter */], []), core[\"_35\" /* ɵmpd */](4608, datepicker_config[\"a\" /* NgbDatepickerConfig */], datepicker_config[\"a\" /* NgbDatepickerConfig */], []), core[\"_35\" /* ɵmpd */](4608, timepicker_config[\"a\" /* NgbTimepickerConfig */], timepicker_config[\"a\" /* NgbTimepickerConfig */], []), core[\"_35\" /* ɵmpd */](4608, draggable_helper_provider[\"a\" /* DraggableHelper */], draggable_helper_provider[\"a\" /* DraggableHelper */], []), core[\"_35\" /* ɵmpd */](4608, calendar_event_title_formatter_provider[\"a\" /* CalendarEventTitleFormatter */], calendar_event_title_formatter_provider[\"a\" /* CalendarEventTitleFormatter */], []), core[\"_35\" /* ɵmpd */](4608, calendar_date_formatter_provider[\"a\" /* CalendarDateFormatter */], calendar_date_formatter_provider[\"a\" /* CalendarDateFormatter */], []), core[\"_35\" /* ɵmpd */](4608, calendar_utils_provider[\"a\" /* CalendarUtils */], calendar_utils_provider[\"a\" /* CalendarUtils */], []), core[\"_35\" /* ɵmpd */](512, common[\"c\" /* CommonModule */], common[\"c\" /* CommonModule */], []), core[\"_35\" /* ɵmpd */](512, http_HttpClientXsrfModule, http_HttpClientXsrfModule, []), core[\"_35\" /* ɵmpd */](512, http_HttpClientModule, http_HttpClientModule, []), core[\"_35\" /* ɵmpd */](512, calendar_common_module[\"a\" /* CalendarCommonModule */], calendar_common_module[\"a\" /* CalendarCommonModule */], []), core[\"_35\" /* ɵmpd */](512, drag_and_drop_module[\"a\" /* DragAndDropModule */], drag_and_drop_module[\"a\" /* DragAndDropModule */], []), core[\"_35\" /* ɵmpd */](512, calendar_month_module[\"a\" /* CalendarMonthModule */], calendar_month_module[\"a\" /* CalendarMonthModule */], []), core[\"_35\" /* ɵmpd */](512, resizable_module[\"a\" /* ResizableModule */], resizable_module[\"a\" /* ResizableModule */], []), core[\"_35\" /* ɵmpd */](512, calendar_week_module[\"a\" /* CalendarWeekModule */], calendar_week_module[\"a\" /* CalendarWeekModule */], []), core[\"_35\" /* ɵmpd */](512, calendar_day_module[\"a\" /* CalendarDayModule */], calendar_day_module[\"a\" /* CalendarDayModule */], []), core[\"_35\" /* ɵmpd */](512, calendar_module[\"c\" /* CalendarModule */], calendar_module[\"c\" /* CalendarModule */], []), core[\"_35\" /* ɵmpd */](512, esm5_forms[\"m\" /* ɵba */], esm5_forms[\"m\" /* ɵba */], []), core[\"_35\" /* ɵmpd */](512, esm5_forms[\"d\" /* FormsModule */], esm5_forms[\"d\" /* FormsModule */], []), core[\"_35\" /* ɵmpd */](512, datepicker_module[\"a\" /* NgbDatepickerModule */], datepicker_module[\"a\" /* NgbDatepickerModule */], []), core[\"_35\" /* ɵmpd */](512, timepicker_module[\"a\" /* NgbTimepickerModule */], timepicker_module[\"a\" /* NgbTimepickerModule */], []), core[\"_35\" /* ɵmpd */](512, demo_utils_module[\"a\" /* DemoUtilsModule */], demo_utils_module[\"a\" /* DemoUtilsModule */], []), core[\"_35\" /* ɵmpd */](512, router[\"o\" /* RouterModule */], router[\"o\" /* RouterModule */], [[2, router[\"t\" /* ɵa */]], [2, router[\"m\" /* Router */]]]), core[\"_35\" /* ɵmpd */](512, DemoModule, DemoModule, []), core[\"_35\" /* ɵmpd */](256, XSRF_COOKIE_NAME, \"XSRF-TOKEN\", []), core[\"_35\" /* ɵmpd */](256, XSRF_HEADER_NAME, \"X-XSRF-TOKEN\", []), core[\"_35\" /* ɵmpd */](1024, router[\"k\" /* ROUTES */], function () { return [[{ path: \"\", component: component_DemoComponent }]]; }, [])]); });\n\n//# sourceMappingURL=module.ngfactory.js.map\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// 63-3d7add72d12a29377ab2.js","/**\n * @license Angular v5.0.2\n * (c) 2010-2017 Google, Inc. https://angular.io/\n * License: MIT\n */\nimport { Inject, Injectable, InjectionToken, NgModule, Optional, PLATFORM_ID } from '@angular/core';\nimport { of } from 'rxjs/observable/of';\nimport { concatMap } from 'rxjs/operator/concatMap';\nimport { filter } from 'rxjs/operator/filter';\nimport { map } from 'rxjs/operator/map';\nimport { __extends } from 'tslib';\nimport { DOCUMENT, ɵparseCookieValue } from '@angular/common';\nimport { Observable } from 'rxjs/Observable';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\n * `HttpResponse`.\n *\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\n * `HttpBackend`.\n *\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\n *\n * \\@stable\n * @abstract\n */\nvar HttpHandler = (function () {\n    function HttpHandler() {\n    }\n    return HttpHandler;\n}());\n/**\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\n *\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\n *\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\n * through the interceptor chain.\n *\n * \\@stable\n * @abstract\n */\nvar HttpBackend = (function () {\n    function HttpBackend() {\n    }\n    return HttpBackend;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @record\n */\n/**\n * Immutable set of Http headers, with lazy parsing.\n * \\@stable\n */\nvar HttpHeaders = (function () {\n    function HttpHeaders(headers) {\n        var _this = this;\n        /**\n         * Internal map of lowercased header names to the normalized\n         * form of the name (the form seen first).\n         */\n        this.normalizedNames = new Map();\n        /**\n         * Queued updates to be materialized the next initialization.\n         */\n        this.lazyUpdate = null;\n        if (!headers) {\n            this.headers = new Map();\n        }\n        else if (typeof headers === 'string') {\n            this.lazyInit = function () {\n                _this.headers = new Map();\n                headers.split('\\n').forEach(function (line) {\n                    var /** @type {?} */ index = line.indexOf(':');\n                    if (index > 0) {\n                        var /** @type {?} */ name_1 = line.slice(0, index);\n                        var /** @type {?} */ key = name_1.toLowerCase();\n                        var /** @type {?} */ value = line.slice(index + 1).trim();\n                        _this.maybeSetNormalizedName(name_1, key);\n                        if (_this.headers.has(key)) {\n                            /** @type {?} */ ((_this.headers.get(key))).push(value);\n                        }\n                        else {\n                            _this.headers.set(key, [value]);\n                        }\n                    }\n                });\n            };\n        }\n        else {\n            this.lazyInit = function () {\n                _this.headers = new Map();\n                Object.keys(headers).forEach(function (name) {\n                    var /** @type {?} */ values = headers[name];\n                    var /** @type {?} */ key = name.toLowerCase();\n                    if (typeof values === 'string') {\n                        values = [values];\n                    }\n                    if (values.length > 0) {\n                        _this.headers.set(key, values);\n                        _this.maybeSetNormalizedName(name, key);\n                    }\n                });\n            };\n        }\n    }\n    /**\n     * Checks for existence of header by given name.\n     */\n    /**\n     * Checks for existence of header by given name.\n     * @param {?} name\n     * @return {?}\n     */\n    HttpHeaders.prototype.has = /**\n     * Checks for existence of header by given name.\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        this.init();\n        return this.headers.has(name.toLowerCase());\n    };\n    /**\n     * Returns first header that matches given name.\n     */\n    /**\n     * Returns first header that matches given name.\n     * @param {?} name\n     * @return {?}\n     */\n    HttpHeaders.prototype.get = /**\n     * Returns first header that matches given name.\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        this.init();\n        var /** @type {?} */ values = this.headers.get(name.toLowerCase());\n        return values && values.length > 0 ? values[0] : null;\n    };\n    /**\n     * Returns the names of the headers\n     */\n    /**\n     * Returns the names of the headers\n     * @return {?}\n     */\n    HttpHeaders.prototype.keys = /**\n     * Returns the names of the headers\n     * @return {?}\n     */\n    function () {\n        this.init();\n        return Array.from(this.normalizedNames.values());\n    };\n    /**\n     * Returns list of header values for a given name.\n     */\n    /**\n     * Returns list of header values for a given name.\n     * @param {?} name\n     * @return {?}\n     */\n    HttpHeaders.prototype.getAll = /**\n     * Returns list of header values for a given name.\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        this.init();\n        return this.headers.get(name.toLowerCase()) || null;\n    };\n    /**\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    HttpHeaders.prototype.append = /**\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    function (name, value) {\n        return this.clone({ name: name, value: value, op: 'a' });\n    };\n    /**\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    HttpHeaders.prototype.set = /**\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    function (name, value) {\n        return this.clone({ name: name, value: value, op: 's' });\n    };\n    /**\n     * @param {?} name\n     * @param {?=} value\n     * @return {?}\n     */\n    HttpHeaders.prototype.delete = /**\n     * @param {?} name\n     * @param {?=} value\n     * @return {?}\n     */\n    function (name, value) {\n        return this.clone({ name: name, value: value, op: 'd' });\n    };\n    /**\n     * @param {?} name\n     * @param {?} lcName\n     * @return {?}\n     */\n    HttpHeaders.prototype.maybeSetNormalizedName = /**\n     * @param {?} name\n     * @param {?} lcName\n     * @return {?}\n     */\n    function (name, lcName) {\n        if (!this.normalizedNames.has(lcName)) {\n            this.normalizedNames.set(lcName, name);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    HttpHeaders.prototype.init = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (!!this.lazyInit) {\n            if (this.lazyInit instanceof HttpHeaders) {\n                this.copyFrom(this.lazyInit);\n            }\n            else {\n                this.lazyInit();\n            }\n            this.lazyInit = null;\n            if (!!this.lazyUpdate) {\n                this.lazyUpdate.forEach(function (update) { return _this.applyUpdate(update); });\n                this.lazyUpdate = null;\n            }\n        }\n    };\n    /**\n     * @param {?} other\n     * @return {?}\n     */\n    HttpHeaders.prototype.copyFrom = /**\n     * @param {?} other\n     * @return {?}\n     */\n    function (other) {\n        var _this = this;\n        other.init();\n        Array.from(other.headers.keys()).forEach(function (key) {\n            _this.headers.set(key, /** @type {?} */ ((other.headers.get(key))));\n            _this.normalizedNames.set(key, /** @type {?} */ ((other.normalizedNames.get(key))));\n        });\n    };\n    /**\n     * @param {?} update\n     * @return {?}\n     */\n    HttpHeaders.prototype.clone = /**\n     * @param {?} update\n     * @return {?}\n     */\n    function (update) {\n        var /** @type {?} */ clone = new HttpHeaders();\n        clone.lazyInit =\n            (!!this.lazyInit && this.lazyInit instanceof HttpHeaders) ? this.lazyInit : this;\n        clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\n        return clone;\n    };\n    /**\n     * @param {?} update\n     * @return {?}\n     */\n    HttpHeaders.prototype.applyUpdate = /**\n     * @param {?} update\n     * @return {?}\n     */\n    function (update) {\n        var /** @type {?} */ key = update.name.toLowerCase();\n        switch (update.op) {\n            case 'a':\n            case 's':\n                var /** @type {?} */ value = /** @type {?} */ ((update.value));\n                if (typeof value === 'string') {\n                    value = [value];\n                }\n                if (value.length === 0) {\n                    return;\n                }\n                this.maybeSetNormalizedName(update.name, key);\n                var /** @type {?} */ base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\n                base.push.apply(base, value);\n                this.headers.set(key, base);\n                break;\n            case 'd':\n                var /** @type {?} */ toDelete_1 = /** @type {?} */ (update.value);\n                if (!toDelete_1) {\n                    this.headers.delete(key);\n                    this.normalizedNames.delete(key);\n                }\n                else {\n                    var /** @type {?} */ existing = this.headers.get(key);\n                    if (!existing) {\n                        return;\n                    }\n                    existing = existing.filter(function (value) { return toDelete_1.indexOf(value) === -1; });\n                    if (existing.length === 0) {\n                        this.headers.delete(key);\n                        this.normalizedNames.delete(key);\n                    }\n                    else {\n                        this.headers.set(key, existing);\n                    }\n                }\n                break;\n        }\n    };\n    /**\n     * @internal\n     */\n    /**\n     * \\@internal\n     * @param {?} fn\n     * @return {?}\n     */\n    HttpHeaders.prototype.forEach = /**\n     * \\@internal\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        var _this = this;\n        this.init();\n        Array.from(this.normalizedNames.keys())\n            .forEach(function (key) { return fn(/** @type {?} */ ((_this.normalizedNames.get(key))), /** @type {?} */ ((_this.headers.get(key)))); });\n    };\n    return HttpHeaders;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * A codec for encoding and decoding parameters in URLs.\n *\n * Used by `HttpParams`.\n *\n * \\@stable\n *\n * @record\n */\n\n/**\n * A `HttpParameterCodec` that uses `encodeURIComponent` and `decodeURIComponent` to\n * serialize and parse URL parameter keys and values.\n *\n * \\@stable\n */\nvar HttpUrlEncodingCodec = (function () {\n    function HttpUrlEncodingCodec() {\n    }\n    /**\n     * @param {?} k\n     * @return {?}\n     */\n    HttpUrlEncodingCodec.prototype.encodeKey = /**\n     * @param {?} k\n     * @return {?}\n     */\n    function (k) { return standardEncoding(k); };\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    HttpUrlEncodingCodec.prototype.encodeValue = /**\n     * @param {?} v\n     * @return {?}\n     */\n    function (v) { return standardEncoding(v); };\n    /**\n     * @param {?} k\n     * @return {?}\n     */\n    HttpUrlEncodingCodec.prototype.decodeKey = /**\n     * @param {?} k\n     * @return {?}\n     */\n    function (k) { return decodeURIComponent(k); };\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    HttpUrlEncodingCodec.prototype.decodeValue = /**\n     * @param {?} v\n     * @return {?}\n     */\n    function (v) { return decodeURIComponent(v); };\n    return HttpUrlEncodingCodec;\n}());\n/**\n * @param {?} rawParams\n * @param {?} codec\n * @return {?}\n */\nfunction paramParser(rawParams, codec) {\n    var /** @type {?} */ map$$1 = new Map();\n    if (rawParams.length > 0) {\n        var /** @type {?} */ params = rawParams.split('&');\n        params.forEach(function (param) {\n            var /** @type {?} */ eqIdx = param.indexOf('=');\n            var _a = eqIdx == -1 ?\n                [codec.decodeKey(param), ''] :\n                [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))], key = _a[0], val = _a[1];\n            var /** @type {?} */ list = map$$1.get(key) || [];\n            list.push(val);\n            map$$1.set(key, list);\n        });\n    }\n    return map$$1;\n}\n/**\n * @param {?} v\n * @return {?}\n */\nfunction standardEncoding(v) {\n    return encodeURIComponent(v)\n        .replace(/%40/gi, '@')\n        .replace(/%3A/gi, ':')\n        .replace(/%24/gi, '$')\n        .replace(/%2C/gi, ',')\n        .replace(/%3B/gi, ';')\n        .replace(/%2B/gi, '+')\n        .replace(/%3D/gi, '=')\n        .replace(/%3F/gi, '?')\n        .replace(/%2F/gi, '/');\n}\n/**\n * Options used to construct an `HttpParams` instance.\n * @record\n */\n\n/**\n * An HTTP request/response body that represents serialized parameters,\n * per the MIME type `application/x-www-form-urlencoded`.\n *\n * This class is immutable - all mutation operations return a new instance.\n *\n * \\@stable\n */\nvar HttpParams = (function () {\n    function HttpParams(options) {\n        if (options === void 0) { options = /** @type {?} */ ({}); }\n        var _this = this;\n        this.updates = null;\n        this.cloneFrom = null;\n        this.encoder = options.encoder || new HttpUrlEncodingCodec();\n        if (!!options.fromString) {\n            if (!!options.fromObject) {\n                throw new Error(\"Cannot specify both fromString and fromObject.\");\n            }\n            this.map = paramParser(options.fromString, this.encoder);\n        }\n        else if (!!options.fromObject) {\n            this.map = new Map();\n            Object.keys(options.fromObject).forEach(function (key) {\n                var /** @type {?} */ value = (/** @type {?} */ (options.fromObject))[key]; /** @type {?} */\n                ((_this.map)).set(key, Array.isArray(value) ? value : [value]);\n            });\n        }\n        else {\n            this.map = null;\n        }\n    }\n    /**\n     * Check whether the body has one or more values for the given parameter name.\n     */\n    /**\n     * Check whether the body has one or more values for the given parameter name.\n     * @param {?} param\n     * @return {?}\n     */\n    HttpParams.prototype.has = /**\n     * Check whether the body has one or more values for the given parameter name.\n     * @param {?} param\n     * @return {?}\n     */\n    function (param) {\n        this.init();\n        return /** @type {?} */ ((this.map)).has(param);\n    };\n    /**\n     * Get the first value for the given parameter name, or `null` if it's not present.\n     */\n    /**\n     * Get the first value for the given parameter name, or `null` if it's not present.\n     * @param {?} param\n     * @return {?}\n     */\n    HttpParams.prototype.get = /**\n     * Get the first value for the given parameter name, or `null` if it's not present.\n     * @param {?} param\n     * @return {?}\n     */\n    function (param) {\n        this.init();\n        var /** @type {?} */ res = /** @type {?} */ ((this.map)).get(param);\n        return !!res ? res[0] : null;\n    };\n    /**\n     * Get all values for the given parameter name, or `null` if it's not present.\n     */\n    /**\n     * Get all values for the given parameter name, or `null` if it's not present.\n     * @param {?} param\n     * @return {?}\n     */\n    HttpParams.prototype.getAll = /**\n     * Get all values for the given parameter name, or `null` if it's not present.\n     * @param {?} param\n     * @return {?}\n     */\n    function (param) {\n        this.init();\n        return /** @type {?} */ ((this.map)).get(param) || null;\n    };\n    /**\n     * Get all the parameter names for this body.\n     */\n    /**\n     * Get all the parameter names for this body.\n     * @return {?}\n     */\n    HttpParams.prototype.keys = /**\n     * Get all the parameter names for this body.\n     * @return {?}\n     */\n    function () {\n        this.init();\n        return Array.from(/** @type {?} */ ((this.map)).keys());\n    };\n    /**\n     * Construct a new body with an appended value for the given parameter name.\n     */\n    /**\n     * Construct a new body with an appended value for the given parameter name.\n     * @param {?} param\n     * @param {?} value\n     * @return {?}\n     */\n    HttpParams.prototype.append = /**\n     * Construct a new body with an appended value for the given parameter name.\n     * @param {?} param\n     * @param {?} value\n     * @return {?}\n     */\n    function (param, value) { return this.clone({ param: param, value: value, op: 'a' }); };\n    /**\n     * Construct a new body with a new value for the given parameter name.\n     */\n    /**\n     * Construct a new body with a new value for the given parameter name.\n     * @param {?} param\n     * @param {?} value\n     * @return {?}\n     */\n    HttpParams.prototype.set = /**\n     * Construct a new body with a new value for the given parameter name.\n     * @param {?} param\n     * @param {?} value\n     * @return {?}\n     */\n    function (param, value) { return this.clone({ param: param, value: value, op: 's' }); };\n    /**\n     * Construct a new body with either the given value for the given parameter\n     * removed, if a value is given, or all values for the given parameter removed\n     * if not.\n     */\n    /**\n     * Construct a new body with either the given value for the given parameter\n     * removed, if a value is given, or all values for the given parameter removed\n     * if not.\n     * @param {?} param\n     * @param {?=} value\n     * @return {?}\n     */\n    HttpParams.prototype.delete = /**\n     * Construct a new body with either the given value for the given parameter\n     * removed, if a value is given, or all values for the given parameter removed\n     * if not.\n     * @param {?} param\n     * @param {?=} value\n     * @return {?}\n     */\n    function (param, value) { return this.clone({ param: param, value: value, op: 'd' }); };\n    /**\n     * Serialize the body to an encoded string, where key-value pairs (separated by `=`) are\n     * separated by `&`s.\n     */\n    /**\n     * Serialize the body to an encoded string, where key-value pairs (separated by `=`) are\n     * separated by `&`s.\n     * @return {?}\n     */\n    HttpParams.prototype.toString = /**\n     * Serialize the body to an encoded string, where key-value pairs (separated by `=`) are\n     * separated by `&`s.\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this.init();\n        return this.keys()\n            .map(function (key) {\n            var /** @type {?} */ eKey = _this.encoder.encodeKey(key);\n            return /** @type {?} */ ((/** @type {?} */ ((_this.map)).get(key))).map(function (value) { return eKey + '=' + _this.encoder.encodeValue(value); }).join('&');\n        })\n            .join('&');\n    };\n    /**\n     * @param {?} update\n     * @return {?}\n     */\n    HttpParams.prototype.clone = /**\n     * @param {?} update\n     * @return {?}\n     */\n    function (update) {\n        var /** @type {?} */ clone = new HttpParams(/** @type {?} */ ({ encoder: this.encoder }));\n        clone.cloneFrom = this.cloneFrom || this;\n        clone.updates = (this.updates || []).concat([update]);\n        return clone;\n    };\n    /**\n     * @return {?}\n     */\n    HttpParams.prototype.init = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (this.map === null) {\n            this.map = new Map();\n        }\n        if (this.cloneFrom !== null) {\n            this.cloneFrom.init();\n            this.cloneFrom.keys().forEach(function (key) { return /** @type {?} */ ((_this.map)).set(key, /** @type {?} */ ((/** @type {?} */ ((/** @type {?} */ ((_this.cloneFrom)).map)).get(key)))); }); /** @type {?} */\n            ((this.updates)).forEach(function (update) {\n                switch (update.op) {\n                    case 'a':\n                    case 's':\n                        var /** @type {?} */ base = (update.op === 'a' ? /** @type {?} */ ((_this.map)).get(update.param) : undefined) || [];\n                        base.push(/** @type {?} */ ((update.value))); /** @type {?} */\n                        ((_this.map)).set(update.param, base);\n                        break;\n                    case 'd':\n                        if (update.value !== undefined) {\n                            var /** @type {?} */ base_1 = /** @type {?} */ ((_this.map)).get(update.param) || [];\n                            var /** @type {?} */ idx = base_1.indexOf(update.value);\n                            if (idx !== -1) {\n                                base_1.splice(idx, 1);\n                            }\n                            if (base_1.length > 0) {\n                                /** @type {?} */ ((_this.map)).set(update.param, base_1);\n                            }\n                            else {\n                                /** @type {?} */ ((_this.map)).delete(update.param);\n                            }\n                        }\n                        else {\n                            /** @type {?} */ ((_this.map)).delete(update.param);\n                            break;\n                        }\n                }\n            });\n            this.cloneFrom = null;\n        }\n    };\n    return HttpParams;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Determine whether the given HTTP method may include a body.\n * @param {?} method\n * @return {?}\n */\nfunction mightHaveBody(method) {\n    switch (method) {\n        case 'DELETE':\n        case 'GET':\n        case 'HEAD':\n        case 'OPTIONS':\n        case 'JSONP':\n            return false;\n        default:\n            return true;\n    }\n}\n/**\n * Safely assert whether the given value is an ArrayBuffer.\n *\n * In some execution environments ArrayBuffer is not defined.\n * @param {?} value\n * @return {?}\n */\nfunction isArrayBuffer(value) {\n    return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\n}\n/**\n * Safely assert whether the given value is a Blob.\n *\n * In some execution environments Blob is not defined.\n * @param {?} value\n * @return {?}\n */\nfunction isBlob(value) {\n    return typeof Blob !== 'undefined' && value instanceof Blob;\n}\n/**\n * Safely assert whether the given value is a FormData instance.\n *\n * In some execution environments FormData is not defined.\n * @param {?} value\n * @return {?}\n */\nfunction isFormData(value) {\n    return typeof FormData !== 'undefined' && value instanceof FormData;\n}\n/**\n * An outgoing HTTP request with an optional typed body.\n *\n * `HttpRequest` represents an outgoing request, including URL, method,\n * headers, body, and other request configuration options. Instances should be\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\n * method should be used.\n *\n * \\@stable\n */\nvar HttpRequest = (function () {\n    function HttpRequest(method, url, third, fourth) {\n        this.url = url;\n        /**\n         * The request body, or `null` if one isn't set.\n         *\n         * Bodies are not enforced to be immutable, as they can include a reference to any\n         * user-defined data type. However, interceptors should take care to preserve\n         * idempotence by treating them as such.\n         */\n        this.body = null;\n        /**\n         * Whether this request should be made in a way that exposes progress events.\n         *\n         * Progress events are expensive (change detection runs on each event) and so\n         * they should only be requested if the consumer intends to monitor them.\n         */\n        this.reportProgress = false;\n        /**\n         * Whether this request should be sent with outgoing credentials (cookies).\n         */\n        this.withCredentials = false;\n        /**\n         * The expected response type of the server.\n         *\n         * This is used to parse the response appropriately before returning it to\n         * the requestee.\n         */\n        this.responseType = 'json';\n        this.method = method.toUpperCase();\n        // Next, need to figure out which argument holds the HttpRequestInit\n        // options, if any.\n        var /** @type {?} */ options;\n        // Check whether a body argument is expected. The only valid way to omit\n        // the body argument is to use a known no-body method like GET.\n        if (mightHaveBody(this.method) || !!fourth) {\n            // Body is the third argument, options are the fourth.\n            this.body = /** @type {?} */ (third) || null;\n            options = fourth;\n        }\n        else {\n            // No body required, options are the third argument. The body stays null.\n            options = /** @type {?} */ (third);\n        }\n        // If options have been passed, interpret them.\n        if (options) {\n            // Normalize reportProgress and withCredentials.\n            this.reportProgress = !!options.reportProgress;\n            this.withCredentials = !!options.withCredentials;\n            // Override default response type of 'json' if one is provided.\n            if (!!options.responseType) {\n                this.responseType = options.responseType;\n            }\n            // Override headers if they're provided.\n            if (!!options.headers) {\n                this.headers = options.headers;\n            }\n            if (!!options.params) {\n                this.params = options.params;\n            }\n        }\n        // If no headers have been passed in, construct a new HttpHeaders instance.\n        if (!this.headers) {\n            this.headers = new HttpHeaders();\n        }\n        // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\n        if (!this.params) {\n            this.params = new HttpParams();\n            this.urlWithParams = url;\n        }\n        else {\n            // Encode the parameters to a string in preparation for inclusion in the URL.\n            var /** @type {?} */ params = this.params.toString();\n            if (params.length === 0) {\n                // No parameters, the visible URL is just the URL given at creation time.\n                this.urlWithParams = url;\n            }\n            else {\n                // Does the URL already have query parameters? Look for '?'.\n                var /** @type {?} */ qIdx = url.indexOf('?');\n                // There are 3 cases to handle:\n                // 1) No existing parameters -> append '?' followed by params.\n                // 2) '?' exists and is followed by existing query string ->\n                //    append '&' followed by params.\n                // 3) '?' exists at the end of the url -> append params directly.\n                // This basically amounts to determining the character, if any, with\n                // which to join the URL and parameters.\n                var /** @type {?} */ sep = qIdx === -1 ? '?' : (qIdx < url.length - 1 ? '&' : '');\n                this.urlWithParams = url + sep + params;\n            }\n        }\n    }\n    /**\n     * Transform the free-form body into a serialized format suitable for\n     * transmission to the server.\n     */\n    /**\n     * Transform the free-form body into a serialized format suitable for\n     * transmission to the server.\n     * @return {?}\n     */\n    HttpRequest.prototype.serializeBody = /**\n     * Transform the free-form body into a serialized format suitable for\n     * transmission to the server.\n     * @return {?}\n     */\n    function () {\n        // If no body is present, no need to serialize it.\n        if (this.body === null) {\n            return null;\n        }\n        // Check whether the body is already in a serialized form. If so,\n        // it can just be returned directly.\n        if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) ||\n            typeof this.body === 'string') {\n            return this.body;\n        }\n        // Check whether the body is an instance of HttpUrlEncodedParams.\n        if (this.body instanceof HttpParams) {\n            return this.body.toString();\n        }\n        // Check whether the body is an object or array, and serialize with JSON if so.\n        if (typeof this.body === 'object' || typeof this.body === 'boolean' ||\n            Array.isArray(this.body)) {\n            return JSON.stringify(this.body);\n        }\n        // Fall back on toString() for everything else.\n        return (/** @type {?} */ (this.body)).toString();\n    };\n    /**\n     * Examine the body and attempt to infer an appropriate MIME type\n     * for it.\n     *\n     * If no such type can be inferred, this method will return `null`.\n     */\n    /**\n     * Examine the body and attempt to infer an appropriate MIME type\n     * for it.\n     *\n     * If no such type can be inferred, this method will return `null`.\n     * @return {?}\n     */\n    HttpRequest.prototype.detectContentTypeHeader = /**\n     * Examine the body and attempt to infer an appropriate MIME type\n     * for it.\n     *\n     * If no such type can be inferred, this method will return `null`.\n     * @return {?}\n     */\n    function () {\n        // An empty body has no content type.\n        if (this.body === null) {\n            return null;\n        }\n        // FormData bodies rely on the browser's content type assignment.\n        if (isFormData(this.body)) {\n            return null;\n        }\n        // Blobs usually have their own content type. If it doesn't, then\n        // no type can be inferred.\n        if (isBlob(this.body)) {\n            return this.body.type || null;\n        }\n        // Array buffers have unknown contents and thus no type can be inferred.\n        if (isArrayBuffer(this.body)) {\n            return null;\n        }\n        // Technically, strings could be a form of JSON data, but it's safe enough\n        // to assume they're plain strings.\n        if (typeof this.body === 'string') {\n            return 'text/plain';\n        }\n        // `HttpUrlEncodedParams` has its own content-type.\n        if (this.body instanceof HttpParams) {\n            return 'application/x-www-form-urlencoded;charset=UTF-8';\n        }\n        // Arrays, objects, and numbers will be encoded as JSON.\n        if (typeof this.body === 'object' || typeof this.body === 'number' ||\n            Array.isArray(this.body)) {\n            return 'application/json';\n        }\n        // No type could be inferred.\n        return null;\n    };\n    /**\n     * @param {?=} update\n     * @return {?}\n     */\n    HttpRequest.prototype.clone = /**\n     * @param {?=} update\n     * @return {?}\n     */\n    function (update) {\n        if (update === void 0) { update = {}; }\n        // For method, url, and responseType, take the current value unless\n        // it is overridden in the update hash.\n        var /** @type {?} */ method = update.method || this.method;\n        var /** @type {?} */ url = update.url || this.url;\n        var /** @type {?} */ responseType = update.responseType || this.responseType;\n        // The body is somewhat special - a `null` value in update.body means\n        // whatever current body is present is being overridden with an empty\n        // body, whereas an `undefined` value in update.body implies no\n        // override.\n        var /** @type {?} */ body = (update.body !== undefined) ? update.body : this.body;\n        // Carefully handle the boolean options to differentiate between\n        // `false` and `undefined` in the update args.\n        var /** @type {?} */ withCredentials = (update.withCredentials !== undefined) ? update.withCredentials : this.withCredentials;\n        var /** @type {?} */ reportProgress = (update.reportProgress !== undefined) ? update.reportProgress : this.reportProgress;\n        // Headers and params may be appended to if `setHeaders` or\n        // `setParams` are used.\n        var /** @type {?} */ headers = update.headers || this.headers;\n        var /** @type {?} */ params = update.params || this.params;\n        // Check whether the caller has asked to add headers.\n        if (update.setHeaders !== undefined) {\n            // Set every requested header.\n            headers =\n                Object.keys(update.setHeaders)\n                    .reduce(function (headers, name) { return headers.set(name, /** @type {?} */ ((update.setHeaders))[name]); }, headers);\n        }\n        // Check whether the caller has asked to set params.\n        if (update.setParams) {\n            // Set every requested param.\n            params = Object.keys(update.setParams)\n                .reduce(function (params, param) { return params.set(param, /** @type {?} */ ((update.setParams))[param]); }, params);\n        }\n        // Finally, construct the new HttpRequest using the pieces from above.\n        return new HttpRequest(method, url, body, {\n            params: params, headers: headers, reportProgress: reportProgress, responseType: responseType, withCredentials: withCredentials,\n        });\n    };\n    return HttpRequest;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @enum {number} */\nvar HttpEventType = {\n    /**\n       * The request was sent out over the wire.\n       */\n    Sent: 0,\n    /**\n       * An upload progress event was received.\n       */\n    UploadProgress: 1,\n    /**\n       * The response status code and headers were received.\n       */\n    ResponseHeader: 2,\n    /**\n       * A download progress event was received.\n       */\n    DownloadProgress: 3,\n    /**\n       * The full response including the body was received.\n       */\n    Response: 4,\n    /**\n       * A custom event from an interceptor or a backend.\n       */\n    User: 5,\n};\nHttpEventType[HttpEventType.Sent] = \"Sent\";\nHttpEventType[HttpEventType.UploadProgress] = \"UploadProgress\";\nHttpEventType[HttpEventType.ResponseHeader] = \"ResponseHeader\";\nHttpEventType[HttpEventType.DownloadProgress] = \"DownloadProgress\";\nHttpEventType[HttpEventType.Response] = \"Response\";\nHttpEventType[HttpEventType.User] = \"User\";\n/**\n * Base interface for progress events.\n *\n * \\@stable\n * @record\n */\n\n/**\n * A download progress event.\n *\n * \\@stable\n * @record\n */\n\n/**\n * An upload progress event.\n *\n * \\@stable\n * @record\n */\n\n/**\n * An event indicating that the request was sent to the server. Useful\n * when a request may be retried multiple times, to distinguish between\n * retries on the final event stream.\n *\n * \\@stable\n * @record\n */\n\n/**\n * A user-defined event.\n *\n * Grouping all custom events under this type ensures they will be handled\n * and forwarded by all implementations of interceptors.\n *\n * \\@stable\n * @record\n */\n\n/**\n * An error that represents a failed attempt to JSON.parse text coming back\n * from the server.\n *\n * It bundles the Error object with the actual response body that failed to parse.\n *\n * \\@stable\n * @record\n */\n\n/**\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\n *\n * \\@stable\n * @abstract\n */\nvar HttpResponseBase = (function () {\n    /**\n     * Super-constructor for all responses.\n     *\n     * The single parameter accepted is an initialization hash. Any properties\n     * of the response passed there will override the default values.\n     */\n    function HttpResponseBase(init, defaultStatus, defaultStatusText) {\n        if (defaultStatus === void 0) { defaultStatus = 200; }\n        if (defaultStatusText === void 0) { defaultStatusText = 'OK'; }\n        // If the hash has values passed, use them to initialize the response.\n        // Otherwise use the default values.\n        this.headers = init.headers || new HttpHeaders();\n        this.status = init.status !== undefined ? init.status : defaultStatus;\n        this.statusText = init.statusText || defaultStatusText;\n        this.url = init.url || null;\n        // Cache the ok value to avoid defining a getter.\n        this.ok = this.status >= 200 && this.status < 300;\n    }\n    return HttpResponseBase;\n}());\n/**\n * A partial HTTP response which only includes the status and header data,\n * but no response body.\n *\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\n * event stream, only when progress events are requested.\n *\n * \\@stable\n */\nvar HttpHeaderResponse = (function (_super) {\n    __extends(HttpHeaderResponse, _super);\n    /**\n     * Create a new `HttpHeaderResponse` with the given parameters.\n     */\n    function HttpHeaderResponse(init) {\n        if (init === void 0) { init = {}; }\n        var _this = _super.call(this, init) || this;\n        _this.type = HttpEventType.ResponseHeader;\n        return _this;\n    }\n    /**\n     * Copy this `HttpHeaderResponse`, overriding its contents with the\n     * given parameter hash.\n     */\n    /**\n     * Copy this `HttpHeaderResponse`, overriding its contents with the\n     * given parameter hash.\n     * @param {?=} update\n     * @return {?}\n     */\n    HttpHeaderResponse.prototype.clone = /**\n     * Copy this `HttpHeaderResponse`, overriding its contents with the\n     * given parameter hash.\n     * @param {?=} update\n     * @return {?}\n     */\n    function (update) {\n        if (update === void 0) { update = {}; }\n        // Perform a straightforward initialization of the new HttpHeaderResponse,\n        // overriding the current parameters with new ones if given.\n        return new HttpHeaderResponse({\n            headers: update.headers || this.headers,\n            status: update.status !== undefined ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    };\n    return HttpHeaderResponse;\n}(HttpResponseBase));\n/**\n * A full HTTP response, including a typed response body (which may be `null`\n * if one was not returned).\n *\n * `HttpResponse` is a `HttpEvent` available on the response event\n * stream.\n *\n * \\@stable\n */\nvar HttpResponse = (function (_super) {\n    __extends(HttpResponse, _super);\n    /**\n     * Construct a new `HttpResponse`.\n     */\n    function HttpResponse(init) {\n        if (init === void 0) { init = {}; }\n        var _this = _super.call(this, init) || this;\n        _this.type = HttpEventType.Response;\n        _this.body = init.body || null;\n        return _this;\n    }\n    /**\n     * @param {?=} update\n     * @return {?}\n     */\n    HttpResponse.prototype.clone = /**\n     * @param {?=} update\n     * @return {?}\n     */\n    function (update) {\n        if (update === void 0) { update = {}; }\n        return new HttpResponse({\n            body: (update.body !== undefined) ? update.body : this.body,\n            headers: update.headers || this.headers,\n            status: (update.status !== undefined) ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    };\n    return HttpResponse;\n}(HttpResponseBase));\n/**\n * A response that represents an error or failure, either from a\n * non-successful HTTP status, an error while executing the request,\n * or some other failure which occurred during the parsing of the response.\n *\n * Any error returned on the `Observable` response stream will be\n * wrapped in an `HttpErrorResponse` to provide additional context about\n * the state of the HTTP layer when the error occurred. The error property\n * will contain either a wrapped Error object or the error response returned\n * from the server.\n *\n * \\@stable\n */\nvar HttpErrorResponse = (function (_super) {\n    __extends(HttpErrorResponse, _super);\n    function HttpErrorResponse(init) {\n        var _this = \n        // Initialize with a default status of 0 / Unknown Error.\n        _super.call(this, init, 0, 'Unknown Error') || this;\n        _this.name = 'HttpErrorResponse';\n        /**\n         * Errors are never okay, even when the status code is in the 2xx success range.\n         */\n        _this.ok = false;\n        // If the response was successful, then this was a parse error. Otherwise, it was\n        // a protocol-level failure of some sort. Either the request failed in transit\n        // or the server returned an unsuccessful status code.\n        if (_this.status >= 200 && _this.status < 300) {\n            _this.message = \"Http failure during parsing for \" + (init.url || '(unknown url)');\n        }\n        else {\n            _this.message =\n                \"Http failure response for \" + (init.url || '(unknown url)') + \": \" + init.status + \" \" + init.statusText;\n        }\n        _this.error = init.error || null;\n        return _this;\n    }\n    return HttpErrorResponse;\n}(HttpResponseBase));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Construct an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\n * the given `body`. Basically, this clones the object and adds the body.\n * @template T\n * @param {?} options\n * @param {?} body\n * @return {?}\n */\nfunction addBody(options, body) {\n    return {\n        body: body,\n        headers: options.headers,\n        observe: options.observe,\n        params: options.params,\n        reportProgress: options.reportProgress,\n        responseType: options.responseType,\n        withCredentials: options.withCredentials,\n    };\n}\n/**\n * Perform HTTP requests.\n *\n * `HttpClient` is available as an injectable class, with methods to perform HTTP requests.\n * Each request method has multiple signatures, and the return type varies according to which\n * signature is called (mainly the values of `observe` and `responseType`).\n *\n * \\@stable\n */\nvar HttpClient = (function () {\n    function HttpClient(handler) {\n        this.handler = handler;\n    }\n    /**\n     * Constructs an `Observable` for a particular HTTP request that, when subscribed,\n     * fires the request through the chain of registered interceptors and on to the\n     * server.\n     *\n     * This method can be called in one of two ways. Either an `HttpRequest`\n     * instance can be passed directly as the only parameter, or a method can be\n     * passed as the first parameter, a string URL as the second, and an\n     * options hash as the third.\n     *\n     * If a `HttpRequest` object is passed directly, an `Observable` of the\n     * raw `HttpEvent` stream will be returned.\n     *\n     * If a request is instead built by providing a URL, the options object\n     * determines the return type of `request()`. In addition to configuring\n     * request parameters such as the outgoing headers and/or the body, the options\n     * hash specifies two key pieces of information about the request: the\n     * `responseType` and what to `observe`.\n     *\n     * The `responseType` value determines how a successful response body will be\n     * parsed. If `responseType` is the default `json`, a type interface for the\n     * resulting object may be passed as a type parameter to `request()`.\n     *\n     * The `observe` value determines the return type of `request()`, based on what\n     * the consumer is interested in observing. A value of `events` will return an\n     * `Observable<HttpEvent>` representing the raw `HttpEvent` stream,\n     * including progress events by default. A value of `response` will return an\n     * `Observable<HttpResponse<T>>` where the `T` parameter of `HttpResponse`\n     * depends on the `responseType` and any optionally provided type parameter.\n     * A value of `body` will return an `Observable<T>` with the same `T` body type.\n     */\n    /**\n     * Constructs an `Observable` for a particular HTTP request that, when subscribed,\n     * fires the request through the chain of registered interceptors and on to the\n     * server.\n     *\n     * This method can be called in one of two ways. Either an `HttpRequest`\n     * instance can be passed directly as the only parameter, or a method can be\n     * passed as the first parameter, a string URL as the second, and an\n     * options hash as the third.\n     *\n     * If a `HttpRequest` object is passed directly, an `Observable` of the\n     * raw `HttpEvent` stream will be returned.\n     *\n     * If a request is instead built by providing a URL, the options object\n     * determines the return type of `request()`. In addition to configuring\n     * request parameters such as the outgoing headers and/or the body, the options\n     * hash specifies two key pieces of information about the request: the\n     * `responseType` and what to `observe`.\n     *\n     * The `responseType` value determines how a successful response body will be\n     * parsed. If `responseType` is the default `json`, a type interface for the\n     * resulting object may be passed as a type parameter to `request()`.\n     *\n     * The `observe` value determines the return type of `request()`, based on what\n     * the consumer is interested in observing. A value of `events` will return an\n     * `Observable<HttpEvent>` representing the raw `HttpEvent` stream,\n     * including progress events by default. A value of `response` will return an\n     * `Observable<HttpResponse<T>>` where the `T` parameter of `HttpResponse`\n     * depends on the `responseType` and any optionally provided type parameter.\n     * A value of `body` will return an `Observable<T>` with the same `T` body type.\n     * @param {?} first\n     * @param {?=} url\n     * @param {?=} options\n     * @return {?}\n     */\n    HttpClient.prototype.request = /**\n     * Constructs an `Observable` for a particular HTTP request that, when subscribed,\n     * fires the request through the chain of registered interceptors and on to the\n     * server.\n     *\n     * This method can be called in one of two ways. Either an `HttpRequest`\n     * instance can be passed directly as the only parameter, or a method can be\n     * passed as the first parameter, a string URL as the second, and an\n     * options hash as the third.\n     *\n     * If a `HttpRequest` object is passed directly, an `Observable` of the\n     * raw `HttpEvent` stream will be returned.\n     *\n     * If a request is instead built by providing a URL, the options object\n     * determines the return type of `request()`. In addition to configuring\n     * request parameters such as the outgoing headers and/or the body, the options\n     * hash specifies two key pieces of information about the request: the\n     * `responseType` and what to `observe`.\n     *\n     * The `responseType` value determines how a successful response body will be\n     * parsed. If `responseType` is the default `json`, a type interface for the\n     * resulting object may be passed as a type parameter to `request()`.\n     *\n     * The `observe` value determines the return type of `request()`, based on what\n     * the consumer is interested in observing. A value of `events` will return an\n     * `Observable<HttpEvent>` representing the raw `HttpEvent` stream,\n     * including progress events by default. A value of `response` will return an\n     * `Observable<HttpResponse<T>>` where the `T` parameter of `HttpResponse`\n     * depends on the `responseType` and any optionally provided type parameter.\n     * A value of `body` will return an `Observable<T>` with the same `T` body type.\n     * @param {?} first\n     * @param {?=} url\n     * @param {?=} options\n     * @return {?}\n     */\n    function (first, url, options) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        var /** @type {?} */ req;\n        // Firstly, check whether the primary argument is an instance of `HttpRequest`.\n        if (first instanceof HttpRequest) {\n            // It is. The other arguments must be undefined (per the signatures) and can be\n            // ignored.\n            req = /** @type {?} */ (first);\n        }\n        else {\n            // It's a string, so it represents a URL. Construct a request based on it,\n            // and incorporate the remaining arguments (assuming GET unless a method is\n            // provided.\n            // Figure out the headers.\n            var /** @type {?} */ headers = undefined;\n            if (!!options.headers !== undefined) {\n                if (options.headers instanceof HttpHeaders) {\n                    headers = options.headers;\n                }\n                else {\n                    headers = new HttpHeaders(options.headers);\n                }\n            }\n            // Sort out parameters.\n            var /** @type {?} */ params = undefined;\n            if (!!options.params) {\n                if (options.params instanceof HttpParams) {\n                    params = options.params;\n                }\n                else {\n                    params = new HttpParams(/** @type {?} */ ({ fromObject: options.params }));\n                }\n            }\n            // Construct the request.\n            req = new HttpRequest(first, /** @type {?} */ ((url)), options.body || null, {\n                headers: headers,\n                params: params,\n                reportProgress: options.reportProgress,\n                // By default, JSON is assumed to be returned for all calls.\n                responseType: options.responseType || 'json',\n                withCredentials: options.withCredentials,\n            });\n        }\n        // Start with an Observable.of() the initial request, and run the handler (which\n        // includes all interceptors) inside a concatMap(). This way, the handler runs\n        // inside an Observable chain, which causes interceptors to be re-run on every\n        // subscription (this also makes retries re-run the handler, including interceptors).\n        var /** @type {?} */ events$ = concatMap.call(of(req), function (req) { return _this.handler.handle(req); });\n        // If coming via the API signature which accepts a previously constructed HttpRequest,\n        // the only option is to get the event stream. Otherwise, return the event stream if\n        // that is what was requested.\n        if (first instanceof HttpRequest || options.observe === 'events') {\n            return events$;\n        }\n        // The requested stream contains either the full response or the body. In either\n        // case, the first step is to filter the event stream to extract a stream of\n        // responses(s).\n        var /** @type {?} */ res$ = filter.call(events$, function (event) { return event instanceof HttpResponse; });\n        // Decide which stream to return.\n        switch (options.observe || 'body') {\n            case 'body':\n                // The requested stream is the body. Map the response stream to the response\n                // body. This could be done more simply, but a misbehaving interceptor might\n                // transform the response body into a different format and ignore the requested\n                // responseType. Guard against this by validating that the response is of the\n                // requested type.\n                switch (req.responseType) {\n                    case 'arraybuffer':\n                        return map.call(res$, function (res) {\n                            // Validate that the body is an ArrayBuffer.\n                            if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\n                                throw new Error('Response is not an ArrayBuffer.');\n                            }\n                            return res.body;\n                        });\n                    case 'blob':\n                        return map.call(res$, function (res) {\n                            // Validate that the body is a Blob.\n                            if (res.body !== null && !(res.body instanceof Blob)) {\n                                throw new Error('Response is not a Blob.');\n                            }\n                            return res.body;\n                        });\n                    case 'text':\n                        return map.call(res$, function (res) {\n                            // Validate that the body is a string.\n                            if (res.body !== null && typeof res.body !== 'string') {\n                                throw new Error('Response is not a string.');\n                            }\n                            return res.body;\n                        });\n                    case 'json':\n                    default:\n                        // No validation needed for JSON responses, as they can be of any type.\n                        return map.call(res$, function (res) { return res.body; });\n                }\n            case 'response':\n                // The response stream was requested directly, so return it.\n                return res$;\n            default:\n                // Guard against new future observe types being added.\n                throw new Error(\"Unreachable: unhandled observe type \" + options.observe + \"}\");\n        }\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * DELETE request to be executed on the server. See the individual overloads for\n     * details of `delete()`'s return type based on the provided options.\n     */\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * DELETE request to be executed on the server. See the individual overloads for\n     * details of `delete()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    HttpClient.prototype.delete = /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * DELETE request to be executed on the server. See the individual overloads for\n     * details of `delete()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('DELETE', url, /** @type {?} */ (options));\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * GET request to be executed on the server. See the individual overloads for\n     * details of `get()`'s return type based on the provided options.\n     */\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * GET request to be executed on the server. See the individual overloads for\n     * details of `get()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    HttpClient.prototype.get = /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * GET request to be executed on the server. See the individual overloads for\n     * details of `get()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('GET', url, /** @type {?} */ (options));\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * HEAD request to be executed on the server. See the individual overloads for\n     * details of `head()`'s return type based on the provided options.\n     */\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * HEAD request to be executed on the server. See the individual overloads for\n     * details of `head()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    HttpClient.prototype.head = /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * HEAD request to be executed on the server. See the individual overloads for\n     * details of `head()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('HEAD', url, /** @type {?} */ (options));\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause a request\n     * with the special method `JSONP` to be dispatched via the interceptor pipeline.\n     *\n     * A suitable interceptor must be installed (e.g. via the `HttpClientJsonpModule`).\n     * If no such interceptor is reached, then the `JSONP` request will likely be\n     * rejected by the configured backend.\n     */\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause a request\n     * with the special method `JSONP` to be dispatched via the interceptor pipeline.\n     *\n     * A suitable interceptor must be installed (e.g. via the `HttpClientJsonpModule`).\n     * If no such interceptor is reached, then the `JSONP` request will likely be\n     * rejected by the configured backend.\n     * @template T\n     * @param {?} url\n     * @param {?} callbackParam\n     * @return {?}\n     */\n    HttpClient.prototype.jsonp = /**\n     * Constructs an `Observable` which, when subscribed, will cause a request\n     * with the special method `JSONP` to be dispatched via the interceptor pipeline.\n     *\n     * A suitable interceptor must be installed (e.g. via the `HttpClientJsonpModule`).\n     * If no such interceptor is reached, then the `JSONP` request will likely be\n     * rejected by the configured backend.\n     * @template T\n     * @param {?} url\n     * @param {?} callbackParam\n     * @return {?}\n     */\n    function (url, callbackParam) {\n        return this.request('JSONP', url, {\n            params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\n            observe: 'body',\n            responseType: 'json',\n        });\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * OPTIONS request to be executed on the server. See the individual overloads for\n     * details of `options()`'s return type based on the provided options.\n     */\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * OPTIONS request to be executed on the server. See the individual overloads for\n     * details of `options()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    HttpClient.prototype.options = /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * OPTIONS request to be executed on the server. See the individual overloads for\n     * details of `options()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('OPTIONS', url, /** @type {?} */ (options));\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * PATCH request to be executed on the server. See the individual overloads for\n     * details of `patch()`'s return type based on the provided options.\n     */\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * PATCH request to be executed on the server. See the individual overloads for\n     * details of `patch()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    HttpClient.prototype.patch = /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * PATCH request to be executed on the server. See the individual overloads for\n     * details of `patch()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, body, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('PATCH', url, addBody(options, body));\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * POST request to be executed on the server. See the individual overloads for\n     * details of `post()`'s return type based on the provided options.\n     */\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * POST request to be executed on the server. See the individual overloads for\n     * details of `post()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    HttpClient.prototype.post = /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * POST request to be executed on the server. See the individual overloads for\n     * details of `post()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, body, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('POST', url, addBody(options, body));\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * POST request to be executed on the server. See the individual overloads for\n     * details of `post()`'s return type based on the provided options.\n     */\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * POST request to be executed on the server. See the individual overloads for\n     * details of `post()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    HttpClient.prototype.put = /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * POST request to be executed on the server. See the individual overloads for\n     * details of `post()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, body, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('PUT', url, addBody(options, body));\n    };\n    HttpClient.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    HttpClient.ctorParameters = function () { return [\n        { type: HttpHandler, },\n    ]; };\n    return HttpClient;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Intercepts `HttpRequest` and handles them.\n *\n * Most interceptors will transform the outgoing request before passing it to the\n * next interceptor in the chain, by calling `next.handle(transformedReq)`.\n *\n * In rare cases, interceptors may wish to completely handle a request themselves,\n * and not delegate to the remainder of the chain. This behavior is allowed.\n *\n * \\@stable\n * @record\n */\n\n/**\n * `HttpHandler` which applies an `HttpInterceptor` to an `HttpRequest`.\n *\n * \\@stable\n */\nvar HttpInterceptorHandler = (function () {\n    function HttpInterceptorHandler(next, interceptor) {\n        this.next = next;\n        this.interceptor = interceptor;\n    }\n    /**\n     * @param {?} req\n     * @return {?}\n     */\n    HttpInterceptorHandler.prototype.handle = /**\n     * @param {?} req\n     * @return {?}\n     */\n    function (req) {\n        return this.interceptor.intercept(req, this.next);\n    };\n    return HttpInterceptorHandler;\n}());\n/**\n * A multi-provider token which represents the array of `HttpInterceptor`s that\n * are registered.\n *\n * \\@stable\n */\nvar HTTP_INTERCEPTORS = new InjectionToken('HTTP_INTERCEPTORS');\nvar NoopInterceptor = (function () {\n    function NoopInterceptor() {\n    }\n    /**\n     * @param {?} req\n     * @param {?} next\n     * @return {?}\n     */\n    NoopInterceptor.prototype.intercept = /**\n     * @param {?} req\n     * @param {?} next\n     * @return {?}\n     */\n    function (req, next) {\n        return next.handle(req);\n    };\n    NoopInterceptor.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    NoopInterceptor.ctorParameters = function () { return []; };\n    return NoopInterceptor;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Every request made through JSONP needs a callback name that's unique across the\n// whole page. Each request is assigned an id and the callback name is constructed\n// from that. The next id to be assigned is tracked in a global variable here that\n// is shared among all applications on the page.\nvar nextRequestId = 0;\n// Error text given when a JSONP script is injected, but doesn't invoke the callback\n// passed in its URL.\nvar JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\n// Error text given when a request is passed to the JsonpClientBackend that doesn't\n// have a request method JSONP.\nvar JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\nvar JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';\n/**\n * DI token/abstract type representing a map of JSONP callbacks.\n *\n * In the browser, this should always be the `window` object.\n *\n * \\@stable\n * @abstract\n */\nvar JsonpCallbackContext = (function () {\n    function JsonpCallbackContext() {\n    }\n    return JsonpCallbackContext;\n}());\n/**\n * `HttpBackend` that only processes `HttpRequest` with the JSONP method,\n * by performing JSONP style requests.\n *\n * \\@stable\n */\nvar JsonpClientBackend = (function () {\n    function JsonpClientBackend(callbackMap, document) {\n        this.callbackMap = callbackMap;\n        this.document = document;\n    }\n    /**\n     * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n     * @return {?}\n     */\n    JsonpClientBackend.prototype.nextCallback = /**\n     * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n     * @return {?}\n     */\n    function () { return \"ng_jsonp_callback_\" + nextRequestId++; };\n    /**\n     * Process a JSONP request and return an event stream of the results.\n     */\n    /**\n     * Process a JSONP request and return an event stream of the results.\n     * @param {?} req\n     * @return {?}\n     */\n    JsonpClientBackend.prototype.handle = /**\n     * Process a JSONP request and return an event stream of the results.\n     * @param {?} req\n     * @return {?}\n     */\n    function (req) {\n        var _this = this;\n        // Firstly, check both the method and response type. If either doesn't match\n        // then the request was improperly routed here and cannot be handled.\n        if (req.method !== 'JSONP') {\n            throw new Error(JSONP_ERR_WRONG_METHOD);\n        }\n        else if (req.responseType !== 'json') {\n            throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);\n        }\n        // Everything else happens inside the Observable boundary.\n        return new Observable(function (observer) {\n            // The first step to make a request is to generate the callback name, and replace the\n            // callback placeholder in the URL with the name. Care has to be taken here to ensure\n            // a trailing &, if matched, gets inserted back into the URL in the correct place.\n            var /** @type {?} */ callback = _this.nextCallback();\n            var /** @type {?} */ url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, \"=\" + callback + \"$1\");\n            // Construct the <script> tag and point it at the URL.\n            var /** @type {?} */ node = _this.document.createElement('script');\n            node.src = url;\n            // A JSONP request requires waiting for multiple callbacks. These variables\n            // are closed over and track state across those callbacks.\n            // The response object, if one has been received, or null otherwise.\n            var /** @type {?} */ body = null;\n            // Whether the response callback has been called.\n            var /** @type {?} */ finished = false;\n            // Whether the request has been cancelled (and thus any other callbacks)\n            // should be ignored.\n            var /** @type {?} */ cancelled = false;\n            // Set the response callback in this.callbackMap (which will be the window\n            // object in the browser. The script being loaded via the <script> tag will\n            // eventually call this callback.\n            // Set the response callback in this.callbackMap (which will be the window\n            // object in the browser. The script being loaded via the <script> tag will\n            // eventually call this callback.\n            _this.callbackMap[callback] = function (data) {\n                // Data has been received from the JSONP script. Firstly, delete this callback.\n                delete _this.callbackMap[callback];\n                // Next, make sure the request wasn't cancelled in the meantime.\n                if (cancelled) {\n                    return;\n                }\n                // Set state to indicate data was received.\n                body = data;\n                finished = true;\n            };\n            // cleanup() is a utility closure that removes the <script> from the page and\n            // the response callback from the window. This logic is used in both the\n            // success, error, and cancellation paths, so it's extracted out for convenience.\n            var /** @type {?} */ cleanup = function () {\n                // Remove the <script> tag if it's still on the page.\n                if (node.parentNode) {\n                    node.parentNode.removeChild(node);\n                }\n                // Remove the response callback from the callbackMap (window object in the\n                // browser).\n                delete _this.callbackMap[callback];\n            };\n            // onLoad() is the success callback which runs after the response callback\n            // if the JSONP script loads successfully. The event itself is unimportant.\n            // If something went wrong, onLoad() may run without the response callback\n            // having been invoked.\n            var /** @type {?} */ onLoad = function (event) {\n                // Do nothing if the request has been cancelled.\n                if (cancelled) {\n                    return;\n                }\n                // Cleanup the page.\n                cleanup();\n                // Check whether the response callback has run.\n                if (!finished) {\n                    // It hasn't, something went wrong with the request. Return an error via\n                    // the Observable error path. All JSONP errors have status 0.\n                    observer.error(new HttpErrorResponse({\n                        url: url,\n                        status: 0,\n                        statusText: 'JSONP Error',\n                        error: new Error(JSONP_ERR_NO_CALLBACK),\n                    }));\n                    return;\n                }\n                // Success. body either contains the response body or null if none was\n                // returned.\n                observer.next(new HttpResponse({\n                    body: body,\n                    status: 200,\n                    statusText: 'OK', url: url,\n                }));\n                // Complete the stream, the resposne is over.\n                observer.complete();\n            };\n            // onError() is the error callback, which runs if the script returned generates\n            // a Javascript error. It emits the error via the Observable error channel as\n            // a HttpErrorResponse.\n            var /** @type {?} */ onError = function (error) {\n                // If the request was already cancelled, no need to emit anything.\n                if (cancelled) {\n                    return;\n                }\n                cleanup();\n                // Wrap the error in a HttpErrorResponse.\n                observer.error(new HttpErrorResponse({\n                    error: error,\n                    status: 0,\n                    statusText: 'JSONP Error', url: url,\n                }));\n            };\n            // Subscribe to both the success (load) and error events on the <script> tag,\n            // and add it to the page.\n            node.addEventListener('load', onLoad);\n            node.addEventListener('error', onError);\n            _this.document.body.appendChild(node);\n            // The request has now been successfully sent.\n            observer.next({ type: HttpEventType.Sent });\n            // Cancellation handler.\n            return function () {\n                // Track the cancellation so event listeners won't do anything even if already scheduled.\n                cancelled = true;\n                // Remove the event listeners so they won't run if the events later fire.\n                node.removeEventListener('load', onLoad);\n                node.removeEventListener('error', onError);\n                // And finally, clean up the page.\n                cleanup();\n            };\n        });\n    };\n    JsonpClientBackend.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    JsonpClientBackend.ctorParameters = function () { return [\n        { type: JsonpCallbackContext, },\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] },] },\n    ]; };\n    return JsonpClientBackend;\n}());\n/**\n * An `HttpInterceptor` which identifies requests with the method JSONP and\n * shifts them to the `JsonpClientBackend`.\n *\n * \\@stable\n */\nvar JsonpInterceptor = (function () {\n    function JsonpInterceptor(jsonp) {\n        this.jsonp = jsonp;\n    }\n    /**\n     * @param {?} req\n     * @param {?} next\n     * @return {?}\n     */\n    JsonpInterceptor.prototype.intercept = /**\n     * @param {?} req\n     * @param {?} next\n     * @return {?}\n     */\n    function (req, next) {\n        if (req.method === 'JSONP') {\n            return this.jsonp.handle(/** @type {?} */ (req));\n        }\n        // Fall through for normal HTTP requests.\n        return next.handle(req);\n    };\n    JsonpInterceptor.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    JsonpInterceptor.ctorParameters = function () { return [\n        { type: JsonpClientBackend, },\n    ]; };\n    return JsonpInterceptor;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Determine an appropriate URL for the response, by checking either\n * XMLHttpRequest.responseURL or the X-Request-URL header.\n * @param {?} xhr\n * @return {?}\n */\nfunction getResponseUrl(xhr) {\n    if ('responseURL' in xhr && xhr.responseURL) {\n        return xhr.responseURL;\n    }\n    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n        return xhr.getResponseHeader('X-Request-URL');\n    }\n    return null;\n}\n/**\n * A wrapper around the `XMLHttpRequest` constructor.\n *\n * \\@stable\n * @abstract\n */\nvar XhrFactory = (function () {\n    function XhrFactory() {\n    }\n    return XhrFactory;\n}());\n/**\n * A factory for \\@{link HttpXhrBackend} that uses the `XMLHttpRequest` browser API.\n *\n * \\@stable\n */\nvar BrowserXhr = (function () {\n    function BrowserXhr() {\n    }\n    /**\n     * @return {?}\n     */\n    BrowserXhr.prototype.build = /**\n     * @return {?}\n     */\n    function () { return /** @type {?} */ ((new XMLHttpRequest())); };\n    BrowserXhr.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    BrowserXhr.ctorParameters = function () { return []; };\n    return BrowserXhr;\n}());\n/**\n * An `HttpBackend` which uses the XMLHttpRequest API to send\n * requests to a backend server.\n *\n * \\@stable\n */\nvar HttpXhrBackend = (function () {\n    function HttpXhrBackend(xhrFactory) {\n        this.xhrFactory = xhrFactory;\n    }\n    /**\n     * Process a request and return a stream of response events.\n     */\n    /**\n     * Process a request and return a stream of response events.\n     * @param {?} req\n     * @return {?}\n     */\n    HttpXhrBackend.prototype.handle = /**\n     * Process a request and return a stream of response events.\n     * @param {?} req\n     * @return {?}\n     */\n    function (req) {\n        var _this = this;\n        // Quick check to give a better error message when a user attempts to use\n        // HttpClient.jsonp() without installing the JsonpClientModule\n        if (req.method === 'JSONP') {\n            throw new Error(\"Attempted to construct Jsonp request without JsonpClientModule installed.\");\n        }\n        // Everything happens on Observable subscription.\n        return new Observable(function (observer) {\n            // Start by setting up the XHR object with request method, URL, and withCredentials flag.\n            var /** @type {?} */ xhr = _this.xhrFactory.build();\n            xhr.open(req.method, req.urlWithParams);\n            if (!!req.withCredentials) {\n                xhr.withCredentials = true;\n            }\n            // Add all the requested headers.\n            req.headers.forEach(function (name, values) { return xhr.setRequestHeader(name, values.join(',')); });\n            // Add an Accept header if one isn't present already.\n            if (!req.headers.has('Accept')) {\n                xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\n            }\n            // Auto-detect the Content-Type header if one isn't present already.\n            if (!req.headers.has('Content-Type')) {\n                var /** @type {?} */ detectedType = req.detectContentTypeHeader();\n                // Sometimes Content-Type detection fails.\n                if (detectedType !== null) {\n                    xhr.setRequestHeader('Content-Type', detectedType);\n                }\n            }\n            // Set the responseType if one was requested.\n            if (req.responseType) {\n                var /** @type {?} */ responseType = req.responseType.toLowerCase();\n                // JSON responses need to be processed as text. This is because if the server\n                // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\n                // xhr.response will be null, and xhr.responseText cannot be accessed to\n                // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\n                // is parsed by first requesting text and then applying JSON.parse.\n                xhr.responseType = /** @type {?} */ (((responseType !== 'json') ? responseType : 'text'));\n            }\n            // Serialize the request body if one is present. If not, this will be set to null.\n            var /** @type {?} */ reqBody = req.serializeBody();\n            // If progress events are enabled, response headers will be delivered\n            // in two events - the HttpHeaderResponse event and the full HttpResponse\n            // event. However, since response headers don't change in between these\n            // two events, it doesn't make sense to parse them twice. So headerResponse\n            // caches the data extracted from the response whenever it's first parsed,\n            // to ensure parsing isn't duplicated.\n            var /** @type {?} */ headerResponse = null;\n            // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\n            // state, and memoizes it into headerResponse.\n            var /** @type {?} */ partialFromXhr = function () {\n                if (headerResponse !== null) {\n                    return headerResponse;\n                }\n                // Read status and normalize an IE9 bug (http://bugs.jquery.com/ticket/1450).\n                var /** @type {?} */ status = xhr.status === 1223 ? 204 : xhr.status;\n                var /** @type {?} */ statusText = xhr.statusText || 'OK';\n                // Parse headers from XMLHttpRequest - this step is lazy.\n                var /** @type {?} */ headers = new HttpHeaders(xhr.getAllResponseHeaders());\n                // Read the response URL from the XMLHttpResponse instance and fall back on the\n                // request URL.\n                var /** @type {?} */ url = getResponseUrl(xhr) || req.url;\n                // Construct the HttpHeaderResponse and memoize it.\n                headerResponse = new HttpHeaderResponse({ headers: headers, status: status, statusText: statusText, url: url });\n                return headerResponse;\n            };\n            // Next, a few closures are defined for the various events which XMLHttpRequest can\n            // emit. This allows them to be unregistered as event listeners later.\n            // First up is the load event, which represents a response being fully available.\n            var /** @type {?} */ onLoad = function () {\n                // Read response state from the memoized partial data.\n                var _a = partialFromXhr(), headers = _a.headers, status = _a.status, statusText = _a.statusText, url = _a.url;\n                // The body will be read out if present.\n                var /** @type {?} */ body = null;\n                if (status !== 204) {\n                    // Use XMLHttpRequest.response if set, responseText otherwise.\n                    body = (typeof xhr.response === 'undefined') ? xhr.responseText : xhr.response;\n                }\n                // Normalize another potential bug (this one comes from CORS).\n                if (status === 0) {\n                    status = !!body ? 200 : 0;\n                }\n                // ok determines whether the response will be transmitted on the event or\n                // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n                // but a successful status code can still result in an error if the user\n                // asked for JSON data and the body cannot be parsed as such.\n                var /** @type {?} */ ok = status >= 200 && status < 300;\n                // Check whether the body needs to be parsed as JSON (in many cases the browser\n                // will have done that already).\n                if (ok && req.responseType === 'json' && typeof body === 'string') {\n                    // Attempt the parse. If it fails, a parse error should be delivered to the user.\n                    body = body.replace(XSSI_PREFIX, '');\n                    try {\n                        body = JSON.parse(body);\n                    }\n                    catch (/** @type {?} */ error) {\n                        // Even though the response status was 2xx, this is still an error.\n                        ok = false;\n                        // The parse error contains the text of the body that failed to parse.\n                        body = /** @type {?} */ ({ error: error, text: body });\n                    }\n                }\n                else if (!ok && req.responseType === 'json' && typeof body === 'string') {\n                    try {\n                        // Attempt to parse the body as JSON.\n                        body = JSON.parse(body);\n                    }\n                    catch (/** @type {?} */ error) {\n                        // Cannot be certain that the body was meant to be parsed as JSON.\n                        // Leave the body as a string.\n                    }\n                }\n                if (ok) {\n                    // A successful response is delivered on the event stream.\n                    observer.next(new HttpResponse({\n                        body: body,\n                        headers: headers,\n                        status: status,\n                        statusText: statusText,\n                        url: url || undefined,\n                    }));\n                    // The full body has been received and delivered, no further events\n                    // are possible. This request is complete.\n                    observer.complete();\n                }\n                else {\n                    // An unsuccessful request is delivered on the error channel.\n                    observer.error(new HttpErrorResponse({\n                        // The error in this case is the response body (error from the server).\n                        error: body,\n                        headers: headers,\n                        status: status,\n                        statusText: statusText,\n                        url: url || undefined,\n                    }));\n                }\n            };\n            // The onError callback is called when something goes wrong at the network level.\n            // Connection timeout, DNS error, offline, etc. These are actual errors, and are\n            // transmitted on the error channel.\n            var /** @type {?} */ onError = function (error) {\n                var /** @type {?} */ res = new HttpErrorResponse({\n                    error: error,\n                    status: xhr.status || 0,\n                    statusText: xhr.statusText || 'Unknown Error',\n                });\n                observer.error(res);\n            };\n            // The sentHeaders flag tracks whether the HttpResponseHeaders event\n            // has been sent on the stream. This is necessary to track if progress\n            // is enabled since the event will be sent on only the first download\n            // progerss event.\n            var /** @type {?} */ sentHeaders = false;\n            // The download progress event handler, which is only registered if\n            // progress events are enabled.\n            var /** @type {?} */ onDownProgress = function (event) {\n                // Send the HttpResponseHeaders event if it hasn't been sent already.\n                if (!sentHeaders) {\n                    observer.next(partialFromXhr());\n                    sentHeaders = true;\n                }\n                // Start building the download progress event to deliver on the response\n                // event stream.\n                var /** @type {?} */ progressEvent = {\n                    type: HttpEventType.DownloadProgress,\n                    loaded: event.loaded,\n                };\n                // Set the total number of bytes in the event if it's available.\n                if (event.lengthComputable) {\n                    progressEvent.total = event.total;\n                }\n                // If the request was for text content and a partial response is\n                // available on XMLHttpRequest, include it in the progress event\n                // to allow for streaming reads.\n                if (req.responseType === 'text' && !!xhr.responseText) {\n                    progressEvent.partialText = xhr.responseText;\n                }\n                // Finally, fire the event.\n                observer.next(progressEvent);\n            };\n            // The upload progress event handler, which is only registered if\n            // progress events are enabled.\n            var /** @type {?} */ onUpProgress = function (event) {\n                // Upload progress events are simpler. Begin building the progress\n                // event.\n                var /** @type {?} */ progress = {\n                    type: HttpEventType.UploadProgress,\n                    loaded: event.loaded,\n                };\n                // If the total number of bytes being uploaded is available, include\n                // it.\n                if (event.lengthComputable) {\n                    progress.total = event.total;\n                }\n                // Send the event.\n                observer.next(progress);\n            };\n            // By default, register for load and error events.\n            xhr.addEventListener('load', onLoad);\n            xhr.addEventListener('error', onError);\n            // Progress events are only enabled if requested.\n            if (req.reportProgress) {\n                // Download progress is always enabled if requested.\n                xhr.addEventListener('progress', onDownProgress);\n                // Upload progress depends on whether there is a body to upload.\n                if (reqBody !== null && xhr.upload) {\n                    xhr.upload.addEventListener('progress', onUpProgress);\n                }\n            }\n            // Fire the request, and notify the event stream that it was fired.\n            xhr.send(reqBody);\n            observer.next({ type: HttpEventType.Sent });\n            // This is the return from the Observable function, which is the\n            // request cancellation handler.\n            return function () {\n                // On a cancellation, remove all registered event listeners.\n                xhr.removeEventListener('error', onError);\n                xhr.removeEventListener('load', onLoad);\n                if (req.reportProgress) {\n                    xhr.removeEventListener('progress', onDownProgress);\n                    if (reqBody !== null && xhr.upload) {\n                        xhr.upload.removeEventListener('progress', onUpProgress);\n                    }\n                }\n                // Finally, abort the in-flight request.\n                xhr.abort();\n            };\n        });\n    };\n    HttpXhrBackend.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    HttpXhrBackend.ctorParameters = function () { return [\n        { type: XhrFactory, },\n    ]; };\n    return HttpXhrBackend;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar XSRF_COOKIE_NAME = new InjectionToken('XSRF_COOKIE_NAME');\nvar XSRF_HEADER_NAME = new InjectionToken('XSRF_HEADER_NAME');\n/**\n * Retrieves the current XSRF token to use with the next outgoing request.\n *\n * \\@stable\n * @abstract\n */\nvar HttpXsrfTokenExtractor = (function () {\n    function HttpXsrfTokenExtractor() {\n    }\n    return HttpXsrfTokenExtractor;\n}());\n/**\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\n */\nvar HttpXsrfCookieExtractor = (function () {\n    function HttpXsrfCookieExtractor(doc, platform, cookieName) {\n        this.doc = doc;\n        this.platform = platform;\n        this.cookieName = cookieName;\n        this.lastCookieString = '';\n        this.lastToken = null;\n        /**\n         * \\@internal for testing\n         */\n        this.parseCount = 0;\n    }\n    /**\n     * @return {?}\n     */\n    HttpXsrfCookieExtractor.prototype.getToken = /**\n     * @return {?}\n     */\n    function () {\n        if (this.platform === 'server') {\n            return null;\n        }\n        var /** @type {?} */ cookieString = this.doc.cookie || '';\n        if (cookieString !== this.lastCookieString) {\n            this.parseCount++;\n            this.lastToken = ɵparseCookieValue(cookieString, this.cookieName);\n            this.lastCookieString = cookieString;\n        }\n        return this.lastToken;\n    };\n    HttpXsrfCookieExtractor.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    HttpXsrfCookieExtractor.ctorParameters = function () { return [\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] },] },\n        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] },] },\n        { type: undefined, decorators: [{ type: Inject, args: [XSRF_COOKIE_NAME,] },] },\n    ]; };\n    return HttpXsrfCookieExtractor;\n}());\n/**\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\n */\nvar HttpXsrfInterceptor = (function () {\n    function HttpXsrfInterceptor(tokenService, headerName) {\n        this.tokenService = tokenService;\n        this.headerName = headerName;\n    }\n    /**\n     * @param {?} req\n     * @param {?} next\n     * @return {?}\n     */\n    HttpXsrfInterceptor.prototype.intercept = /**\n     * @param {?} req\n     * @param {?} next\n     * @return {?}\n     */\n    function (req, next) {\n        var /** @type {?} */ lcUrl = req.url.toLowerCase();\n        // Skip both non-mutating requests and absolute URLs.\n        // Non-mutating requests don't require a token, and absolute URLs require special handling\n        // anyway as the cookie set\n        // on our origin is not the same as the token expected by another origin.\n        if (req.method === 'GET' || req.method === 'HEAD' || lcUrl.startsWith('http://') ||\n            lcUrl.startsWith('https://')) {\n            return next.handle(req);\n        }\n        var /** @type {?} */ token = this.tokenService.getToken();\n        // Be careful not to overwrite an existing header of the same name.\n        if (token !== null && !req.headers.has(this.headerName)) {\n            req = req.clone({ headers: req.headers.set(this.headerName, token) });\n        }\n        return next.handle(req);\n    };\n    HttpXsrfInterceptor.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    HttpXsrfInterceptor.ctorParameters = function () { return [\n        { type: HttpXsrfTokenExtractor, },\n        { type: undefined, decorators: [{ type: Inject, args: [XSRF_HEADER_NAME,] },] },\n    ]; };\n    return HttpXsrfInterceptor;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Constructs an `HttpHandler` that applies a bunch of `HttpInterceptor`s\n * to a request before passing it to the given `HttpBackend`.\n *\n * Meant to be used as a factory function within `HttpClientModule`.\n *\n * \\@stable\n * @param {?} backend\n * @param {?=} interceptors\n * @return {?}\n */\nfunction interceptingHandler(backend, interceptors) {\n    if (interceptors === void 0) { interceptors = []; }\n    if (!interceptors) {\n        return backend;\n    }\n    return interceptors.reduceRight(function (next, interceptor) { return new HttpInterceptorHandler(next, interceptor); }, backend);\n}\n/**\n * Factory function that determines where to store JSONP callbacks.\n *\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\n *\n * \\@stable\n * @return {?}\n */\nfunction jsonpCallbackContext() {\n    if (typeof window === 'object') {\n        return window;\n    }\n    return {};\n}\n/**\n * `NgModule` which adds XSRF protection support to outgoing requests.\n *\n * Provided the server supports a cookie-based XSRF protection system, this\n * module can be used directly to configure XSRF protection with the correct\n * cookie and header names.\n *\n * If no such names are provided, the default is to use `X-XSRF-TOKEN` for\n * the header name and `XSRF-TOKEN` for the cookie name.\n *\n * \\@stable\n */\nvar HttpClientXsrfModule = (function () {\n    function HttpClientXsrfModule() {\n    }\n    /**\n     * Disable the default XSRF protection.\n     */\n    /**\n     * Disable the default XSRF protection.\n     * @return {?}\n     */\n    HttpClientXsrfModule.disable = /**\n     * Disable the default XSRF protection.\n     * @return {?}\n     */\n    function () {\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: [\n                { provide: HttpXsrfInterceptor, useClass: NoopInterceptor },\n            ],\n        };\n    };\n    /**\n     * Configure XSRF protection to use the given cookie name or header name,\n     * or the default names (as described above) if not provided.\n     */\n    /**\n     * Configure XSRF protection to use the given cookie name or header name,\n     * or the default names (as described above) if not provided.\n     * @param {?=} options\n     * @return {?}\n     */\n    HttpClientXsrfModule.withOptions = /**\n     * Configure XSRF protection to use the given cookie name or header name,\n     * or the default names (as described above) if not provided.\n     * @param {?=} options\n     * @return {?}\n     */\n    function (options) {\n        if (options === void 0) { options = {}; }\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: [\n                options.cookieName ? { provide: XSRF_COOKIE_NAME, useValue: options.cookieName } : [],\n                options.headerName ? { provide: XSRF_HEADER_NAME, useValue: options.headerName } : [],\n            ],\n        };\n    };\n    HttpClientXsrfModule.decorators = [\n        { type: NgModule, args: [{\n                    providers: [\n                        HttpXsrfInterceptor,\n                        { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\n                        { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n                        { provide: XSRF_COOKIE_NAME, useValue: 'XSRF-TOKEN' },\n                        { provide: XSRF_HEADER_NAME, useValue: 'X-XSRF-TOKEN' },\n                    ],\n                },] },\n    ];\n    /** @nocollapse */\n    HttpClientXsrfModule.ctorParameters = function () { return []; };\n    return HttpClientXsrfModule;\n}());\n/**\n * `NgModule` which provides the `HttpClient` and associated services.\n *\n * Interceptors can be added to the chain behind `HttpClient` by binding them\n * to the multiprovider for `HTTP_INTERCEPTORS`.\n *\n * \\@stable\n */\nvar HttpClientModule = (function () {\n    function HttpClientModule() {\n    }\n    HttpClientModule.decorators = [\n        { type: NgModule, args: [{\n                    imports: [\n                        HttpClientXsrfModule.withOptions({\n                            cookieName: 'XSRF-TOKEN',\n                            headerName: 'X-XSRF-TOKEN',\n                        }),\n                    ],\n                    providers: [\n                        HttpClient,\n                        // HttpHandler is the backend + interceptors and is constructed\n                        // using the interceptingHandler factory function.\n                        {\n                            provide: HttpHandler,\n                            useFactory: interceptingHandler,\n                            deps: [HttpBackend, [new Optional(), new Inject(HTTP_INTERCEPTORS)]],\n                        },\n                        HttpXhrBackend,\n                        { provide: HttpBackend, useExisting: HttpXhrBackend },\n                        BrowserXhr,\n                        { provide: XhrFactory, useExisting: BrowserXhr },\n                    ],\n                },] },\n    ];\n    /** @nocollapse */\n    HttpClientModule.ctorParameters = function () { return []; };\n    return HttpClientModule;\n}());\n/**\n * `NgModule` which enables JSONP support in `HttpClient`.\n *\n * Without this module, Jsonp requests will reach the backend\n * with method JSONP, where they'll be rejected.\n *\n * \\@stable\n */\nvar HttpClientJsonpModule = (function () {\n    function HttpClientJsonpModule() {\n    }\n    HttpClientJsonpModule.decorators = [\n        { type: NgModule, args: [{\n                    providers: [\n                        JsonpClientBackend,\n                        { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },\n                        { provide: HTTP_INTERCEPTORS, useClass: JsonpInterceptor, multi: true },\n                    ],\n                },] },\n    ];\n    /** @nocollapse */\n    HttpClientJsonpModule.ctorParameters = function () { return []; };\n    return HttpClientJsonpModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { HttpBackend, HttpHandler, HttpClient, HttpHeaders, HTTP_INTERCEPTORS, JsonpClientBackend, JsonpInterceptor, HttpClientJsonpModule, HttpClientModule, HttpClientXsrfModule, interceptingHandler as ɵinterceptingHandler, HttpParams, HttpUrlEncodingCodec, HttpRequest, HttpErrorResponse, HttpEventType, HttpHeaderResponse, HttpResponse, HttpResponseBase, HttpXhrBackend, XhrFactory, HttpXsrfTokenExtractor, NoopInterceptor as ɵa, JsonpCallbackContext as ɵb, jsonpCallbackContext as ɵc, BrowserXhr as ɵd, HttpXsrfCookieExtractor as ɵg, HttpXsrfInterceptor as ɵh, XSRF_COOKIE_NAME as ɵe, XSRF_HEADER_NAME as ɵf };\n//# sourceMappingURL=http.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@angular/common/esm5/http.js\n// module id = null\n// module chunks = ","/**\n* @fileoverview This file is generated by the Angular template compiler.\n* Do not edit.\n* @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}\n* tslint:disable\n*/ \nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../src/modules/month/calendar-month-view.component.ngfactory\";\nimport * as i2 from \"../../../src/modules/month/calendar-month-view.component\";\nimport * as i3 from \"../../../src/modules/common/calendar-utils.provider\";\nimport * as i4 from \"../../../src/modules/week/calendar-week-view.component.ngfactory\";\nimport * as i5 from \"../../../src/modules/week/calendar-week-view.component\";\nimport * as i6 from \"../../../src/modules/day/calendar-day-view.component.ngfactory\";\nimport * as i7 from \"../../../src/modules/day/calendar-day-view.component\";\nimport * as i8 from \"@angular/common\";\nimport * as i9 from \"../demo-utils/calendar-header.component.ngfactory\";\nimport * as i10 from \"../demo-utils/calendar-header.component\";\nimport * as i11 from \"./component\";\nimport * as i12 from \"@angular/common/http\";\nvar styles_DemoComponent = [];\nvar RenderType_DemoComponent = i0.ɵcrt({ encapsulation: 2, styles: styles_DemoComponent, data: {} });\nexport { RenderType_DemoComponent as RenderType_DemoComponent };\nfunction View_DemoComponent_1(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵted(-1, null, [\"\\n  \"])), (_l()(), i0.ɵeld(1, 0, null, null, 5, \"div\", [[\"class\", \"text-center\"]], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, [\"\\n    \"])), (_l()(), i0.ɵeld(3, 0, null, null, 0, \"i\", [[\"class\", \"fa fa-spin fa-spinner fa-5x\"]], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, [\"\\n    \"])), (_l()(), i0.ɵeld(5, 0, null, null, 0, \"br\", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, [\"\\n    Loading events...\\n  \"])), (_l()(), i0.ɵted(-1, null, [\"\\n\"]))], null, null); }\nfunction View_DemoComponent_3(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 2, \"mwl-calendar-month-view\", [], null, [[null, \"dayClicked\"], [null, \"eventClicked\"]], function (_v, en, $event) { var ad = true; var _co = _v.component; if ((\"dayClicked\" === en)) {\n        var pd_0 = (_co.dayClicked($event.day) !== false);\n        ad = (pd_0 && ad);\n    } if ((\"eventClicked\" === en)) {\n        var pd_1 = (_co.eventClicked($event.event) !== false);\n        ad = (pd_1 && ad);\n    } return ad; }, i1.View_CalendarMonthViewComponent_0, i1.RenderType_CalendarMonthViewComponent)), i0.ɵdid(1, 770048, null, 0, i2.CalendarMonthViewComponent, [i0.ChangeDetectorRef, i3.CalendarUtils, i0.LOCALE_ID], { viewDate: [0, \"viewDate\"], events: [1, \"events\"], activeDayIsOpen: [2, \"activeDayIsOpen\"] }, { dayClicked: \"dayClicked\", eventClicked: \"eventClicked\" }), (_l()(), i0.ɵted(-1, null, [\"\\n    \"]))], function (_ck, _v) { var _co = _v.component; var currVal_0 = _co.viewDate; var currVal_1 = _v.parent.context.$implicit; var currVal_2 = _co.activeDayIsOpen; _ck(_v, 1, 0, currVal_0, currVal_1, currVal_2); }, null); }\nfunction View_DemoComponent_4(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 2, \"mwl-calendar-week-view\", [], null, [[null, \"eventClicked\"]], function (_v, en, $event) { var ad = true; var _co = _v.component; if ((\"eventClicked\" === en)) {\n        var pd_0 = (_co.eventClicked($event.event) !== false);\n        ad = (pd_0 && ad);\n    } return ad; }, i4.View_CalendarWeekViewComponent_0, i4.RenderType_CalendarWeekViewComponent)), i0.ɵdid(1, 770048, null, 0, i5.CalendarWeekViewComponent, [i0.ChangeDetectorRef, i3.CalendarUtils, i0.LOCALE_ID], { viewDate: [0, \"viewDate\"], events: [1, \"events\"] }, { eventClicked: \"eventClicked\" }), (_l()(), i0.ɵted(-1, null, [\"\\n    \"]))], function (_ck, _v) { var _co = _v.component; var currVal_0 = _co.viewDate; var currVal_1 = _v.parent.context.$implicit; _ck(_v, 1, 0, currVal_0, currVal_1); }, null); }\nfunction View_DemoComponent_5(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 2, \"mwl-calendar-day-view\", [], null, [[null, \"eventClicked\"]], function (_v, en, $event) { var ad = true; var _co = _v.component; if ((\"eventClicked\" === en)) {\n        var pd_0 = (_co.eventClicked($event.event) !== false);\n        ad = (pd_0 && ad);\n    } return ad; }, i6.View_CalendarDayViewComponent_0, i6.RenderType_CalendarDayViewComponent)), i0.ɵdid(1, 770048, null, 0, i7.CalendarDayViewComponent, [i0.ChangeDetectorRef, i3.CalendarUtils, i0.LOCALE_ID], { viewDate: [0, \"viewDate\"], events: [1, \"events\"] }, { eventClicked: \"eventClicked\" }), (_l()(), i0.ɵted(-1, null, [\"\\n    \"]))], function (_ck, _v) { var _co = _v.component; var currVal_0 = _co.viewDate; var currVal_1 = _v.parent.context.$implicit; _ck(_v, 1, 0, currVal_0, currVal_1); }, null); }\nfunction View_DemoComponent_2(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 14, \"div\", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, [\"\\n  \"])), (_l()(), i0.ɵeld(2, 0, null, null, 11, \"div\", [], null, null, null, null, null)), i0.ɵdid(3, 16384, null, 0, i8.NgSwitch, [], { ngSwitch: [0, \"ngSwitch\"] }, null), (_l()(), i0.ɵted(-1, null, [\"\\n    \"])), (_l()(), i0.ɵand(16777216, null, null, 1, null, View_DemoComponent_3)), i0.ɵdid(6, 278528, null, 0, i8.NgSwitchCase, [i0.ViewContainerRef, i0.TemplateRef, i8.NgSwitch], { ngSwitchCase: [0, \"ngSwitchCase\"] }, null), (_l()(), i0.ɵted(-1, null, [\"\\n    \"])), (_l()(), i0.ɵand(16777216, null, null, 1, null, View_DemoComponent_4)), i0.ɵdid(9, 278528, null, 0, i8.NgSwitchCase, [i0.ViewContainerRef, i0.TemplateRef, i8.NgSwitch], { ngSwitchCase: [0, \"ngSwitchCase\"] }, null), (_l()(), i0.ɵted(-1, null, [\"\\n    \"])), (_l()(), i0.ɵand(16777216, null, null, 1, null, View_DemoComponent_5)), i0.ɵdid(12, 278528, null, 0, i8.NgSwitchCase, [i0.ViewContainerRef, i0.TemplateRef, i8.NgSwitch], { ngSwitchCase: [0, \"ngSwitchCase\"] }, null), (_l()(), i0.ɵted(-1, null, [\"\\n  \"])), (_l()(), i0.ɵted(-1, null, [\"\\n\"]))], function (_ck, _v) { var _co = _v.component; var currVal_0 = _co.view; _ck(_v, 3, 0, currVal_0); var currVal_1 = \"month\"; _ck(_v, 6, 0, currVal_1); var currVal_2 = \"week\"; _ck(_v, 9, 0, currVal_2); var currVal_3 = \"day\"; _ck(_v, 12, 0, currVal_3); }, null); }\nexport function View_DemoComponent_0(_l) { return i0.ɵvid(2, [(_l()(), i0.ɵeld(0, 0, null, null, 2, \"mwl-demo-utils-calendar-header\", [], null, [[null, \"viewChange\"], [null, \"viewDateChange\"]], function (_v, en, $event) { var ad = true; var _co = _v.component; if ((\"viewChange\" === en)) {\n        var pd_0 = ((_co.view = $event) !== false);\n        ad = (pd_0 && ad);\n    } if ((\"viewDateChange\" === en)) {\n        var pd_1 = ((_co.viewDate = $event) !== false);\n        ad = (pd_1 && ad);\n    } if ((\"viewDateChange\" === en)) {\n        var pd_2 = (_co.fetchEvents() !== false);\n        ad = (pd_2 && ad);\n    } if ((\"viewChange\" === en)) {\n        var pd_3 = (_co.fetchEvents() !== false);\n        ad = (pd_3 && ad);\n    } return ad; }, i9.View_CalendarHeaderComponent_0, i9.RenderType_CalendarHeaderComponent)), i0.ɵdid(1, 49152, null, 0, i10.CalendarHeaderComponent, [], { view: [0, \"view\"], viewDate: [1, \"viewDate\"] }, { viewChange: \"viewChange\", viewDateChange: \"viewDateChange\" }), (_l()(), i0.ɵted(-1, null, [\"\\n\"])), (_l()(), i0.ɵted(-1, null, [\"\\n\\n\"])), (_l()(), i0.ɵand(0, [[\"loading\", 2]], null, 0, null, View_DemoComponent_1)), (_l()(), i0.ɵted(-1, null, [\"\\n\\n\"])), (_l()(), i0.ɵand(16777216, null, null, 2, null, View_DemoComponent_2)), i0.ɵdid(7, 16384, null, 0, i8.NgIf, [i0.ViewContainerRef, i0.TemplateRef], { ngIf: [0, \"ngIf\"], ngIfElse: [1, \"ngIfElse\"] }, null), i0.ɵpid(131072, i8.AsyncPipe, [i0.ChangeDetectorRef])], function (_ck, _v) { var _co = _v.component; var currVal_0 = _co.view; var currVal_1 = _co.viewDate; _ck(_v, 1, 0, currVal_0, currVal_1); var currVal_2 = i0.ɵunv(_v, 7, 0, i0.ɵnov(_v, 8).transform(_co.events$)); var currVal_3 = i0.ɵnov(_v, 4); _ck(_v, 7, 0, currVal_2, currVal_3); }, null); }\nexport function View_DemoComponent_Host_0(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 1, \"mwl-demo-component\", [], null, null, null, View_DemoComponent_0, RenderType_DemoComponent)), i0.ɵdid(1, 114688, null, 0, i11.DemoComponent, [i12.HttpClient], null, null)], function (_ck, _v) { _ck(_v, 1, 0); }, null); }\nvar DemoComponentNgFactory = i0.ɵccf(\"mwl-demo-component\", i11.DemoComponent, View_DemoComponent_Host_0, {}, {}, []);\nexport { DemoComponentNgFactory as DemoComponentNgFactory };\n//# sourceMappingURL=component.ngfactory.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./demos/demo-modules/async-events/component.ngfactory.js\n// module id = null\n// module chunks = ","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { RouterModule } from '@angular/router';\nimport { CalendarModule } from 'angular-calendar';\nimport { DemoUtilsModule } from '../demo-utils/module';\nimport { DemoComponent } from './component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    CalendarModule.forRoot(),\n    DemoUtilsModule,\n    RouterModule.forChild([{ path: '', component: DemoComponent }])\n  ],\n  declarations: [DemoComponent],\n  exports: [DemoComponent]\n})\nexport class DemoModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./demos/demo-modules/async-events/module.ts","import { Component, ChangeDetectionStrategy, OnInit } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { map } from 'rxjs/operators/map';\nimport { CalendarEvent } from 'angular-calendar';\nimport {\n  isSameMonth,\n  isSameDay,\n  startOfMonth,\n  endOfMonth,\n  startOfWeek,\n  endOfWeek,\n  startOfDay,\n  endOfDay,\n  format\n} from 'date-fns';\nimport { Observable } from 'rxjs/Observable';\nimport { colors } from '../demo-utils/colors';\n\ninterface Film {\n  id: number;\n  title: string;\n  release_date: string;\n}\n\n@Component({\n  selector: 'mwl-demo-component',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  templateUrl: 'template.html'\n})\nexport class DemoComponent implements OnInit {\n  view: string = 'month';\n\n  viewDate: Date = new Date();\n\n  events$: Observable<Array<CalendarEvent<{ film: Film }>>>;\n\n  activeDayIsOpen: boolean = false;\n\n  constructor(private http: HttpClient) {}\n\n  ngOnInit(): void {\n    this.fetchEvents();\n  }\n\n  fetchEvents(): void {\n    const getStart: any = {\n      month: startOfMonth,\n      week: startOfWeek,\n      day: startOfDay\n    }[this.view];\n\n    const getEnd: any = {\n      month: endOfMonth,\n      week: endOfWeek,\n      day: endOfDay\n    }[this.view];\n\n    const params = new HttpParams()\n      .set(\n        'primary_release_date.gte',\n        format(getStart(this.viewDate), 'YYYY-MM-DD')\n      )\n      .set(\n        'primary_release_date.lte',\n        format(getEnd(this.viewDate), 'YYYY-MM-DD')\n      )\n      .set('api_key', '0ec33936a68018857d727958dca1424f');\n\n    this.events$ = this.http\n      .get('https://api.themoviedb.org/3/discover/movie', { params })\n      .pipe(\n        map(({ results }: { results: Film[] }) => {\n          return results.map((film: Film) => {\n            return {\n              title: film.title,\n              start: new Date(film.release_date),\n              color: colors.yellow,\n              meta: {\n                film\n              }\n            };\n          });\n        })\n      );\n  }\n\n  dayClicked({\n    date,\n    events\n  }: {\n    date: Date;\n    events: Array<CalendarEvent<{ film: Film }>>;\n  }): void {\n    if (isSameMonth(date, this.viewDate)) {\n      if (\n        (isSameDay(this.viewDate, date) && this.activeDayIsOpen === true) ||\n        events.length === 0\n      ) {\n        this.activeDayIsOpen = false;\n      } else {\n        this.activeDayIsOpen = true;\n        this.viewDate = date;\n      }\n    }\n  }\n\n  eventClicked(event: CalendarEvent<{ film: Film }>): void {\n    window.open(\n      `https://www.themoviedb.org/movie/${event.meta.film.id}`,\n      '_blank'\n    );\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./demos/demo-modules/async-events/component.ts","/**\n* @fileoverview This file is generated by the Angular template compiler.\n* Do not edit.\n* @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}\n* tslint:disable\n*/ \nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./module\";\nimport * as i2 from \"../../../src/modules/common/calendar-tooltip.directive.ngfactory\";\nimport * as i3 from \"../../../node_modules/@ng-bootstrap/ng-bootstrap/datepicker/datepicker.ngfactory\";\nimport * as i4 from \"./component.ngfactory\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@angular/common/http\";\nimport * as i7 from \"@angular/forms\";\nimport * as i8 from \"@ng-bootstrap/ng-bootstrap/datepicker/ngb-calendar\";\nimport * as i9 from \"@ng-bootstrap/ng-bootstrap/datepicker/datepicker-i18n\";\nimport * as i10 from \"@ng-bootstrap/ng-bootstrap/datepicker/ngb-date-parser-formatter\";\nimport * as i11 from \"@ng-bootstrap/ng-bootstrap/datepicker/datepicker-config\";\nimport * as i12 from \"@ng-bootstrap/ng-bootstrap/timepicker/timepicker-config\";\nimport * as i13 from \"angular-draggable-droppable/dist/esm/src/draggable-helper.provider\";\nimport * as i14 from \"../../../src/modules/common/calendar-event-title-formatter.provider\";\nimport * as i15 from \"../../../src/modules/common/calendar-date-formatter.provider\";\nimport * as i16 from \"../../../src/modules/common/calendar-utils.provider\";\nimport * as i17 from \"../../../src/modules/common/calendar-common.module\";\nimport * as i18 from \"angular-draggable-droppable/dist/esm/src/drag-and-drop.module\";\nimport * as i19 from \"../../../src/modules/month/calendar-month.module\";\nimport * as i20 from \"angular-resizable-element/dist/esm/src/resizable.module\";\nimport * as i21 from \"../../../src/modules/week/calendar-week.module\";\nimport * as i22 from \"../../../src/modules/day/calendar-day.module\";\nimport * as i23 from \"../../../src/modules/calendar.module\";\nimport * as i24 from \"@ng-bootstrap/ng-bootstrap/datepicker/datepicker.module\";\nimport * as i25 from \"@ng-bootstrap/ng-bootstrap/timepicker/timepicker.module\";\nimport * as i26 from \"../demo-utils/module\";\nimport * as i27 from \"@angular/router\";\nimport * as i28 from \"./component\";\nvar DemoModuleNgFactory = i0.ɵcmf(i1.DemoModule, [], function (_l) { return i0.ɵmod([i0.ɵmpd(512, i0.ComponentFactoryResolver, i0.ɵCodegenComponentFactoryResolver, [[8, [i2.CalendarTooltipWindowComponentNgFactory, i3.NgbDatepickerNgFactory, i4.DemoComponentNgFactory]], [3, i0.ComponentFactoryResolver], i0.NgModuleRef]), i0.ɵmpd(4608, i5.NgLocalization, i5.NgLocaleLocalization, [i0.LOCALE_ID, [2, i5.ɵa]]), i0.ɵmpd(4608, i6.HttpXsrfTokenExtractor, i6.ɵg, [i5.DOCUMENT, i0.PLATFORM_ID, i6.ɵe]), i0.ɵmpd(4608, i6.ɵh, i6.ɵh, [i6.HttpXsrfTokenExtractor, i6.ɵf]), i0.ɵmpd(5120, i6.HTTP_INTERCEPTORS, function (p0_0) { return [p0_0]; }, [i6.ɵh]), i0.ɵmpd(4608, i6.ɵd, i6.ɵd, []), i0.ɵmpd(6144, i6.XhrFactory, null, [i6.ɵd]), i0.ɵmpd(4608, i6.HttpXhrBackend, i6.HttpXhrBackend, [i6.XhrFactory]), i0.ɵmpd(6144, i6.HttpBackend, null, [i6.HttpXhrBackend]), i0.ɵmpd(5120, i6.HttpHandler, i6.ɵinterceptingHandler, [i6.HttpBackend, [2, i6.HTTP_INTERCEPTORS]]), i0.ɵmpd(4608, i6.HttpClient, i6.HttpClient, [i6.HttpHandler]), i0.ɵmpd(4608, i7.ɵi, i7.ɵi, []), i0.ɵmpd(4608, i8.NgbCalendar, i8.NgbCalendarGregorian, []), i0.ɵmpd(4608, i9.NgbDatepickerI18n, i9.NgbDatepickerI18nDefault, []), i0.ɵmpd(4608, i10.NgbDateParserFormatter, i10.NgbDateISOParserFormatter, []), i0.ɵmpd(4608, i11.NgbDatepickerConfig, i11.NgbDatepickerConfig, []), i0.ɵmpd(4608, i12.NgbTimepickerConfig, i12.NgbTimepickerConfig, []), i0.ɵmpd(4608, i13.DraggableHelper, i13.DraggableHelper, []), i0.ɵmpd(4608, i14.CalendarEventTitleFormatter, i14.CalendarEventTitleFormatter, []), i0.ɵmpd(4608, i15.CalendarDateFormatter, i15.CalendarDateFormatter, []), i0.ɵmpd(4608, i16.CalendarUtils, i16.CalendarUtils, []), i0.ɵmpd(512, i5.CommonModule, i5.CommonModule, []), i0.ɵmpd(512, i6.HttpClientXsrfModule, i6.HttpClientXsrfModule, []), i0.ɵmpd(512, i6.HttpClientModule, i6.HttpClientModule, []), i0.ɵmpd(512, i17.CalendarCommonModule, i17.CalendarCommonModule, []), i0.ɵmpd(512, i18.DragAndDropModule, i18.DragAndDropModule, []), i0.ɵmpd(512, i19.CalendarMonthModule, i19.CalendarMonthModule, []), i0.ɵmpd(512, i20.ResizableModule, i20.ResizableModule, []), i0.ɵmpd(512, i21.CalendarWeekModule, i21.CalendarWeekModule, []), i0.ɵmpd(512, i22.CalendarDayModule, i22.CalendarDayModule, []), i0.ɵmpd(512, i23.CalendarModule, i23.CalendarModule, []), i0.ɵmpd(512, i7.ɵba, i7.ɵba, []), i0.ɵmpd(512, i7.FormsModule, i7.FormsModule, []), i0.ɵmpd(512, i24.NgbDatepickerModule, i24.NgbDatepickerModule, []), i0.ɵmpd(512, i25.NgbTimepickerModule, i25.NgbTimepickerModule, []), i0.ɵmpd(512, i26.DemoUtilsModule, i26.DemoUtilsModule, []), i0.ɵmpd(512, i27.RouterModule, i27.RouterModule, [[2, i27.ɵa], [2, i27.Router]]), i0.ɵmpd(512, i1.DemoModule, i1.DemoModule, []), i0.ɵmpd(256, i6.ɵe, \"XSRF-TOKEN\", []), i0.ɵmpd(256, i6.ɵf, \"X-XSRF-TOKEN\", []), i0.ɵmpd(1024, i27.ROUTES, function () { return [[{ path: \"\", component: i28.DemoComponent }]]; }, [])]); });\nexport { DemoModuleNgFactory as DemoModuleNgFactory };\n//# sourceMappingURL=module.ngfactory.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./demos/demo-modules/async-events/module.ngfactory.js\n// module id = null\n// module chunks = "],"sourceRoot":""}